<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xml:base="https://neillrobson.com/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Neill Robson&#39;s Website</title>
    <link>https://neillrobson.com/</link>
    <atom:link href="https://neillrobson.com/feed.xml" rel="self" type="application/rss+xml" />
    <description>The blog and portfolio of a software developer.</description>
    <language>en</language>
    <item>
      <title>Fluid CSS</title>
      <link>https://neillrobson.com/blog/2025/04/10/fluid-css/</link>
      <description>&lt;section&gt;
&lt;p&gt;During a recent website re-design, I was delighted by the robust and flexible interface provided by modern CSS.&lt;/p&gt;
&lt;p&gt;I’ve historically felt rather cold toward CSS.
I considered it a disjointed “bag of tricks” for styling websites.
Developers throw arbitrary solutions out until something works,
even if the resulting code is not intuitive.&lt;/p&gt;
&lt;p&gt;My perspective was largely due to my own ignorance.
Shifting my mindset away from breakpoint-based designs,
while learning some new&lt;label for=&quot;sn-5&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input id=&quot;sn-5&quot; type=&quot;checkbox&quot; class=&quot;margin-toggle&quot;&gt;&lt;span class=&quot;sidenote&quot;&gt;and well-supported!&lt;/span&gt; CSS features,
created a joyful design experience that I’m excited to share.&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2025/04/10/fluid-css/#break-away-from-breakpoints&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;break-away-from-breakpoints&quot;&gt;Break Away from Breakpoints&lt;/h2&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Be the browser’s mentor, not its micromanager.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;Andy Bell, &lt;a href=&quot;https://buildexcellentwebsit.es/&quot;&gt;Build Excellent Websites&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Prior to the current site design, my main CSS file had about &lt;a href=&quot;https://github.com/neillrobson/neillrobson.github.io/blob/ad6585eb78cad9ebe744ac8882834cf5994d426b/webpack/style.scss#L666&quot;&gt;eighty-four lines of &lt;code&gt;@media&lt;/code&gt; queries&lt;/a&gt;.
While the rest of the stylesheet defined my site’s layout on a large desktop screen,
the media-query styles overrode those rules to make the site palatable on mobile viewports.
The overrides triggered at three distinct screen width breakpoints.&lt;/p&gt;
&lt;p&gt;Nothing is inherently wrong with media queries,
but I found them a hassle to maintain.
Every time I wanted to adjust an element’s style,
I had to think about what CSS to change in &lt;em&gt;four different locations&lt;/em&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/* here, */&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; screen &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 976px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token selector&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;/* and here, */&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; screen &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 760px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token selector&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;/* and here, */&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; screen &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 400px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token selector&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;/* and here, too. */&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was juggling four distinct website designs in my mind,
each only suited for a certain viewport width.
None of them looked good near the breakpoint widths.&lt;/p&gt;
&lt;p&gt;An &lt;em&gt;unstyled&lt;/em&gt; paragraph on an otherwise blank webpage reflows for any viewport.
Isn’t it ironic that &lt;strong&gt;adding styles makes the design less flexible&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;Andy Bell advocates for writing stylesheets that work at &lt;em&gt;any&lt;/em&gt; width.
Even if you envision a few distinct layouts for different devices,
write style rules that scale smoothly between those two layouts.
The upfront effort creating those rules is higher,
but it results in a single design to maintain down the line.&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2025/04/10/fluid-css/#the-scaling-recipe&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;the-scaling-recipe&quot;&gt;The Scaling Recipe&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;We want to scale our measurements by the viewport width.
The &lt;code&gt;vw&lt;/code&gt; unit is perfect for the task.
A measurement of &lt;code&gt;1vw&lt;/code&gt; is equal to 1% of the viewport width.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;very&lt;/em&gt; simple scaling font size might be:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;16px + 1vw&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The math is simple:
&lt;code&gt;font size = 16px + (0.01 * screen width)&lt;/code&gt;.
Nineteen pixels at a 300px viewport, twenty-six pixels at a 1000px viewport…
Granted, for folks with ultra-wide 8K monitors,
this scaling might get out of hand.&lt;/p&gt;
&lt;p&gt;Fortunately, CSS also has a &lt;code&gt;clamp&lt;/code&gt; function!
If the font size should scale between &lt;code&gt;16px&lt;/code&gt; and &lt;code&gt;24px&lt;/code&gt;,
we could twiddle with the values to find scaling that feels good:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;clamp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;16px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;13px + 0.9vw&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 24px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The font scales nicely, no matter how the viewport is resized.&lt;/p&gt;
&lt;p&gt;It would be nice for the middle quantities to be determined by something more than a gut check, though.
If I still have two ideal viewport widths in mind for mobile versus desktop styling,
a bit of algebra (and CSS pre-processing in SASS) can go a long way:&lt;label for=&quot;sn-derivation&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input id=&quot;sn-derivation&quot; type=&quot;checkbox&quot; class=&quot;margin-toggle&quot;&gt;&lt;span class=&quot;sidenote&quot;&gt;The variables &lt;code&gt;$v&lt;/code&gt; and &lt;code&gt;$p&lt;/code&gt; boil down to the variables in a two-degree system of linear equations.
Or, for the more geometrically-minded,
the solution is finding the equation for the line connecting two points &lt;code&gt;&amp;lt;$breakpoint-min, $min&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;$breakpoint-max, $max&amp;gt;&lt;/code&gt;.
The slope is &lt;code&gt;$v&lt;/code&gt; and the y-intercept is &lt;code&gt;$p&lt;/code&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;@mixin&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;responsive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token variable&quot;&gt;$property&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token variable&quot;&gt;$min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token variable&quot;&gt;$max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token variable&quot;&gt;$breakpoint-min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token variable&quot;&gt;$breakpoint-max&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$v&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; math.&lt;span class=&quot;token function&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$max&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$breakpoint-max&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$breakpoint-min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$p&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$min&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$v&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$breakpoint-min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;#{$property}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;clamp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;#{$min}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;#&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$v&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; 100&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;vi &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;#{$p}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;#{$max}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;p &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Font size is 16px when viewport falls below 400px&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// and is 24px when viewport expands beyond 1000px&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// with linear scaling between those breakpoints&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;responsive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;font-size&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 16px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 24px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 1000px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the recipe is derived, this scaling strategy can be applied to &lt;em&gt;any measurement&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;font size&lt;/li&gt;
&lt;li&gt;paragraph margins&lt;/li&gt;
&lt;li&gt;sidebar width&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Your designs will scale smoothly in every viewport without a single explicit &lt;code&gt;@media&lt;/code&gt; breakpoint.&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2025/04/10/fluid-css/#inside-out-units&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;inside-out-units&quot;&gt;Inside-Out Units&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Basing layout on static pixel dimensions can be brittle, however.
Even on small viewports,
users may attempt to scale the &lt;em&gt;text&lt;/em&gt; to increase visibility.
If my layout depends on 16-pixel body text,
enough font scaling can still make the site unreadable.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt;&lt;label for=&quot;sn-6&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input id=&quot;sn-6&quot; type=&quot;checkbox&quot; class=&quot;margin-toggle&quot;&gt;&lt;span class=&quot;sidenote&quot;&gt;“em” and “root em,” referring to the width of an em-dash. Like this one—see?&lt;/span&gt;
units can be used to address this concern.
Even so, I hardly used those units in a productive manner.
I would set my &lt;code&gt;:root&lt;/code&gt; font size to &lt;code&gt;10px&lt;/code&gt;, such that &lt;code&gt;0.1rem === 1px&lt;/code&gt;,
and simply do mental math to convert my pixel dimensions to the “better” units.&lt;/p&gt;
&lt;p&gt;I missed the point.&lt;/p&gt;
&lt;p&gt;Browsers that scale text often override the &lt;code&gt;:root&lt;/code&gt; font size anyhow,
so my mental math was wrong.
The base font size should be controllable by the end user,
to match their accessibility needs.&lt;/p&gt;
&lt;p&gt;How could I define styles that suit whatever font size the user sets?&lt;/p&gt;
&lt;p&gt;Rather than fitting &lt;code&gt;em&lt;/code&gt; to my fixed-pixel size preference,
I could let it sit at the browser’s (or user’s) default,
and assign dimensions &lt;em&gt;relative to their preference&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For example, my website’s font size is set to the following:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;clamp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;1rem&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0.8rem + 0.9vi&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 1.5rem&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;I have no idea what pixel size 1rem might equal.&lt;/strong&gt;
I just know that, on large screens, I want all text to have a slight (50%) boost at most,
while never falling below whatever dimension the user set.
The scaling factors, &lt;code&gt;0.8rem + 0.9vi&lt;/code&gt;, were chosen based on gut feel
while I shifted the viewport around.&lt;/p&gt;
&lt;p&gt;Using relative units in this way often aligns your layout with typographic best practices.
For example, body text is generally most readable with a line length of 45-90 characters,&lt;label for=&quot;sn-butterick&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input id=&quot;sn-butterick&quot; type=&quot;checkbox&quot; class=&quot;margin-toggle&quot;&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;a href=&quot;https://practicaltypography.com/line-length.html&quot;&gt;Butterick’s Practical Typography&lt;/a&gt; gives this recommendation, along with many other excellent guidelines.&lt;/span&gt;
so the following style is a solid baseline:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/* 1ch =~ width of a &quot;0&quot; character */&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;clamp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;60%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 60ch&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 900px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With a single selector and two declarations,
we’ve expressed a standard with universal applicability:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wide viewports have a pleasant 40% right margin;&lt;/li&gt;
&lt;li&gt;narrow viewports use the whole screen;&lt;/li&gt;
&lt;li&gt;the total paragraph width has a fixed upper bound;&lt;/li&gt;
&lt;li&gt;when all other constraints are satisfied,
prefer to keep the width around 60 characters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2025/04/10/fluid-css/#container-queries&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;container-queries&quot;&gt;Container Queries&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Keeping with the theme of relative content-centric styling,
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_queries#container_query_length_units&quot;&gt;container query units&lt;/a&gt;
are an exciting recent addition to the CSS toolkit.&lt;/p&gt;
&lt;p&gt;Their definitions are consistent with viewport units:
&lt;code&gt;1cqw&lt;/code&gt; is 1% of the Queried Container’s Width.
But rather than being relative to the entire viewport,
they are relative to a bounding box that you define in CSS.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;container-type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inline-size&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.container .margin&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/*
        cqi: &quot;container query inline&quot;
        &quot;inline&quot; is equivalent to &quot;width&quot; in most languages
    */&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 25cqi&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No matter how deeply nested &lt;code&gt;.margin&lt;/code&gt; elements are,
they will always have a width equal to 25% &lt;em&gt;of the ancestor &lt;code&gt;.container&lt;/code&gt; size&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Declaring elements as containers has consequences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The queryable axes must have &lt;em&gt;extrinsic&lt;/em&gt; (or explicit) dimensions set.&lt;label for=&quot;sn-extrinsic&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input id=&quot;sn-extrinsic&quot; type=&quot;checkbox&quot; class=&quot;margin-toggle&quot;&gt;&lt;span class=&quot;sidenote&quot;&gt;The limitation is somewhat intuitive.
If children will be sized based on the parent width,
the parent &lt;em&gt;cannot&lt;/em&gt; “shrink-wrap” to its contents without creating an unresolvable self-reference.
Fortunately, block elements stretch to fill the available width (inline size) by default,
so an &lt;code&gt;inline-size&lt;/code&gt; container type usually doesn’t cause issues.
A container type of just &lt;code&gt;size&lt;/code&gt; &lt;em&gt;will shrink to zero height&lt;/em&gt; if height is not explicitly set, though.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Each container defines a new “containment context,” preventing layout flows between containers:
&lt;ul&gt;
&lt;li&gt;Subsequent content is forced to clear floating elements in previous containers.&lt;/li&gt;
&lt;li&gt;CSS counter state&lt;label for=&quot;sn-counter&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input id=&quot;sn-counter&quot; type=&quot;checkbox&quot; class=&quot;margin-toggle&quot;&gt;&lt;span class=&quot;sidenote&quot;&gt;CSS counters are how sidenotes (like this one!) are automatically numbered.
If each &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; were declared a container,
every sidenote would reset to 1.&lt;/span&gt; is reset in each container.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, when used carefully, some incredible formatting can be achieved.
For example, my sidenotes (on desktop screens) are evenly aligned to the right margin,
regardless of their relative position in the body text.&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2025/04/10/fluid-css/#color-scheme-switcher&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;color-scheme-switcher&quot;&gt;Color Scheme Switcher&lt;/h2&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Yet another Internet site adds “unreadable mode.” Got it.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;&lt;a href=&quot;https://danlj.org/mkj/&quot;&gt;Michael Johnson&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I tend to use light color schemes at a low monitor brightness for daily work.
My preference is purely personal, and I appreciate designs that support both light and dark color schemes.&lt;/p&gt;
&lt;p&gt;CSS offers a media query for the user’s preferred color scheme:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;prefers-color-scheme&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; dark&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; black&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; white&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But not everyone knows how to switch the preference for their browser.
Others lack the patience to navigate through all those menus.
I wanted a way for my site to respect the browser default,
and also provide a means to quickly switch the color scheme.&lt;/p&gt;
&lt;p&gt;With some creative markup (and a few accessibility caveats),
a solution with only HTML and CSS is possible!&lt;/p&gt;
&lt;p&gt;CSS provides a &lt;code&gt;:checked&lt;/code&gt; pseudo-class for checkboxes and radio inputs that are selected.
The first proof-of-concept consisted of adding radio control as a child of the body tag:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;radio&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;color-theme&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;system&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;checked&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;theme-system&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;radio&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;color-theme&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;dark&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;theme-dark&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;radio&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;color-theme&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;light&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;theme-light&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;container&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- content --&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then adding CSS color variables:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;body:has(#theme-dark:checked)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;--background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; black&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;--color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; white&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But I didn&#39;t want unstyled radio buttons sitting at the top of every page.
HTML forms support clicking &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; elements to select the corresponding input field,&lt;label for=&quot;sn-label&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input id=&quot;sn-label&quot; type=&quot;checkbox&quot; class=&quot;margin-toggle&quot;&gt;&lt;span class=&quot;sidenote&quot;&gt;This functionality is particularly useful when filling out forms
on extremely small viewports, where tapping the tiny checkboxes is infeasible.&lt;/span&gt;
and the input control doesn’t need to be located anywhere near the label.&lt;/p&gt;
&lt;p&gt;So I put some labels into my navigation bar as such:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;fieldset&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;theme-switcher&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;visible&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;legend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Theme&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;legend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;label&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;theme-system&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;tabindex&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- system icon --&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;label&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;theme-dark&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;tabindex&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- moon icon --&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;label&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;theme-light&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;tabindex&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- sun icon --&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;fieldset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I could style them however I wished.
It has some limitations—discussed in the &lt;a href=&quot;https://neillrobson.com/blog/2025/04/10/fluid-css/#keeping-js-at-a-minimum&quot;&gt;following section&lt;/a&gt;—but the base functionality operates without a lick of Javascript!&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2025/04/10/fluid-css/#keeping-js-at-a-minimum&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;keeping-js-at-a-minimum&quot;&gt;Keeping JS at a Minimum&lt;/h2&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;In 5 years nothing you (personally, not a publicly traded company)
build today that depends on Javascript in the browser to display content will be available,
visible, or archived anywhere on the web.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;Tantek Çelik, &lt;a href=&quot;https://tantek.com/2025/069/t1/ten-years-jsdr-javascript-required-didnt-read&quot;&gt;JavaScript Required; Didn’t Read&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a software engineer with a focus on front-end web development,
I have nothing against Javascript and related web frameworks.
Those technologies are how I make a living.&lt;/p&gt;
&lt;p&gt;However, I also know that web technologies and patterns shift at a blistering pace.
Javascript is unavoidable when developing a web-hosted &lt;em&gt;application&lt;/em&gt;,
but a site focused on static &lt;em&gt;content delivery&lt;/em&gt; doesn’t need such infrastructure.
Given the impressive capabilities that modern HTML and CSS afford,
I set out to redesign this site with no Javascript at all.&lt;/p&gt;
&lt;p&gt;The goal of purging JS was… mostly achieved.&lt;/p&gt;
&lt;p&gt;I left a single inline &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; in the head of the site’s document.
Crucially, if you disable JS in your browser or delete the script entirely,
&lt;strong&gt;the content and styling of the site is identical.&lt;/strong&gt;
In other words, the site is not &lt;em&gt;dependent&lt;/em&gt; on Javascript to display anything authored by me.&lt;/p&gt;
&lt;p&gt;Why did I include JS at all?
The script serves a few purposes, in order of decreasing importance:&lt;/p&gt;
&lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;
&lt;p&gt;The color scheme selector is not keyboard-accessible by default.
Label elements can be clicked to activate their corresponding input controls,
but keyboard interactions don’t work.
A few event listeners override the default behavior for tab-focus and the space bar,
causing the labels behave more like buttons or links.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The color scheme preference does not persist across page navigation.
Javascript is necessary to read or write any form of browser storage.
Without that persistence, the color scheme choice resets to the browser default
on every new page visited.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The comment system, &lt;a href=&quot;https://giscus.app/&quot;&gt;Giscus&lt;/a&gt;,
needs a notification to match its color scheme with the main site.
Giscus itself also uses some Javascript of its own—but it’s all contained
in an iframe.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Notice that all of these features relate purely to the controls of an aesthetic aspect of the site.
Even if none of the Javascript persists in an archive,
all of the content will still be rendered in a reasonable manner.&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2025/04/10/fluid-css/#giscus&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;giscus&quot;&gt;Giscus&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;This blog previously used the Disqus comment system.
While I personally had no issues with Disqus
(and the blog had under ten comments at the time of migration!),
I was made aware of some &lt;a href=&quot;https://www.logora.com/blog-posts/data-privacy-concerns-disqus&quot;&gt;data privacy concerns&lt;/a&gt;
with the company.&lt;/p&gt;
&lt;p&gt;Even for a site as innocuous as my own,
I didn’t want contributors to feel uncomfortable with where their data may be stored (or sold to).
Since my site is maintained on GitHub and deployed with GitHub Pages,
keeping the comments on GitHub was a natural choice.&lt;/p&gt;
&lt;p&gt;The biggest downside is the need for contributors to have a GitHub account—perhaps
a deterrent for non-technical readers.
Fortunately, once an account is created, &lt;em&gt;no technical knowledge is necessary&lt;/em&gt; to comment.
The widget UI works just like any other comment system.&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2025/04/10/fluid-css/#conclusion&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;As usual, I spent more time refining my site’s infrastructure than writing content.
Even so, the project was insightful and fun.
Side projects don’t always have to be lucrative or illustrious.
The rejuvenating effect of simply building something beautiful is its own reward!&lt;/p&gt;
&lt;/section&gt;
</description>
      <pubDate>Thu, 10 Apr 2025 00:00:00 GMT</pubDate>
      <dc:creator>Neill Robson</dc:creator>
      <guid>https://neillrobson.com/blog/2025/04/10/fluid-css/</guid>
    </item>
    <item>
      <title>Lamp of the Body</title>
      <link>https://neillrobson.com/blog/2025/04/04/lamp-of-the-body/</link>
      <description>&lt;section&gt;
&lt;p&gt;Speculative fiction about the life of a member of the MPAA.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I wrote the first draft of this short story in the autumn of 2019, for a college creative writing course.
Although my writing style has changed as I’ve aged,
the themes of this story still haunt me from time to time.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;Neill Robson&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;p&gt;&lt;span class=&quot;newthought&quot; id=&quot;%E2%80%9Cdavid.-thank-you&quot;&gt;&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2025/04/04/lamp-of-the-body/#%E2%80%9Cdavid.-thank-you&quot;&gt;&lt;/a&gt;“David. Thank you&lt;/span&gt; for coming in on such short notice.”&lt;/p&gt;
&lt;p&gt;“It certainly isn’t a problem, sir.”&lt;/p&gt;
&lt;p&gt;David lowered himself into the couch before Valenti’s desk. The leather upholstery was
warm against his slacks.&lt;/p&gt;
&lt;p&gt;“Let me cut to the chase. We have an opening on the Board.”&lt;/p&gt;
&lt;p&gt;David frowned.&lt;/p&gt;
&lt;p&gt;“Now, you have been with us for… three years?”&lt;/p&gt;
&lt;p&gt;“Well, sir, it will be three years in May. And that’s only if you count my time doing
contract work through Pulse Informatics. Really, my history has been more in data analytics—”&lt;/p&gt;
&lt;p&gt;“Hell if I care about your C.V. Point is, you’ve been a damn good auditor. People respect
your opinion. They listen.”&lt;/p&gt;
&lt;p&gt;“Thank you, sir.”&lt;/p&gt;
&lt;p&gt;Valenti removed a folder from his desk and pushed the cabinet closed along silent ball
bearings. He held up a handful of documents.&lt;/p&gt;
&lt;p&gt;“Confidentiality and liability. Same stuff you’ve already signed getting employed here in
the first place—mostly. You’ll have the privilege of watching this crap before it’s released. Don’t
go squealing at parties, taking bribes, being generally stupid. In return, we stay silent about your
position.”&lt;/p&gt;
&lt;p&gt;David took the papers and scanned them. &lt;em&gt;Terrence Valenti, Chairman.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;“Sir, if I may be completely candid, I… there are many others who would like a seat on
the ratings board, more than me. The classification process takes time, and with Abigail’s baby
on the way, it just wouldn’t be wise—this transition…”&lt;/p&gt;
&lt;p&gt;Valenti held his gaze.&lt;/p&gt;
&lt;p&gt;“We don’t need any more auditors, David.”&lt;/p&gt;
&lt;p&gt;The couch enveloped David. Struggling to return to his feet, he reached toward Valenti’s
desk to grab a pen and sign the papers.&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;p&gt;&lt;span class=&quot;newthought&quot; id=&quot;cold-air-blasted&quot;&gt;&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2025/04/04/lamp-of-the-body/#cold-air-blasted&quot;&gt;&lt;/a&gt;Cold air blasted&lt;/span&gt; out of the bus doors, dissipating into the sweltering Hollywood summer.
Only a couple of spaces remained unoccupied within. A blonde woman in athletic gear contorted
herself in her seat to retain body heat amid the relentless air conditioning. Standing in the aisle, a
younger Hispanic girl wrapped her blazer tighter around her blouse. David made his way to the
back of the bus, where a sun-burnt man with gray dreadlocks and faded tank top occupied two
seats. The bus jolted forward as David sat down across from him. Taking out a baby blue
notebook and pen from his satchel, David began to write.&lt;/p&gt;
&lt;p&gt;“Golly, that’s some fine handwriting you’ve got there.”&lt;/p&gt;
&lt;p&gt;David glanced at the man with dreads and raised the corners of his lips.&lt;/p&gt;
&lt;p&gt;“Wait, wait, let me guess. You do design or something?”&lt;/p&gt;
&lt;p&gt;“No.”&lt;/p&gt;
&lt;p&gt;David kept his focus downward. The man in dreads leaned across the isle and stared at
David’s right thigh, where his identification card dangled.&lt;/p&gt;
&lt;p&gt;“Son of a biscuit! A goonie from the Motion Picture Association! What’re they paying
you for? Letter addressing?” A burst of laughter—or hiccups, David wasn’t sure which—erupted
from the man’s mouth.&lt;/p&gt;
&lt;p&gt;“No, I’m actually— I’m just an auditor.” David closed his notebook and stared through
the bus window at the department stores passing by.&lt;/p&gt;
&lt;p&gt;“Audio-what? You mean like music? Soundtracks? Man, what a joke. Working the suits
in Hollywood and you get stuck with the marching band dropouts and a Walkman. Must suck
trying to sleaze your wa—”&lt;/p&gt;
&lt;p&gt;“He didn’t say anything about audio. If I had to guess, auditors are around to keep the
‘sleazy’ types out of the industry.”&lt;/p&gt;
&lt;p&gt;David’s head whipped toward the source of this new voice. The Hispanic woman had
turned to face them.&lt;/p&gt;
&lt;p&gt;“I’m also with the MPAA: public relations department.”&lt;/p&gt;
&lt;p&gt;The man in dreads snorted. “What luck! I’m on a truck of toadies.” He pulled the bus’s
bell cord on the corner of Tampa and Topham. As he left, he shot a wink at the blonde woman up
front, receiving the finger in return. David covered his face with his hands. The bus lurched
forward.&lt;/p&gt;
&lt;p&gt;“I’m Beth, by the way.” She had moved into the vacant seat left behind.&lt;/p&gt;
&lt;p&gt;“Thank you, Beth.” David couldn’t bring himself to look at his colleague. “Really, thank
you.”&lt;/p&gt;
&lt;p&gt;“Um. If you don’t mind me asking. I think that I recognize… What is that written on the
front of your notebook there?”&lt;/p&gt;
&lt;p&gt;David moved his hand to reveal the silver lettering embossed on the book’s cover. He re-read the
text of the Bible verse in his mind: &lt;em&gt;The light of the body is the eye. If therefore thine eye
be single, thy whole body shall be full of light.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;“That’s a beautiful verse: one of Jesus’s teachings, right?” Beth glanced between the
notebook and David’s face. “It’s unusual to see Scripture out here. I mean, not &lt;em&gt;bad&lt;/em&gt; unusual,
but…”&lt;/p&gt;
&lt;p&gt;David caught Beth’s gaze for a moment. “Yeah. I know.”&lt;/p&gt;
&lt;p&gt;The bus approached Sherman Way. Beth reached for the bell cord and picked up her bag
to leave. David sprung out of his seat as well.&lt;/p&gt;
&lt;p&gt;“David! My name is David. I forgot to say that. I— It was good talking— nice to meet
you. Thank you. Again.”&lt;/p&gt;
&lt;p&gt;Beth turned, smiled. “Of course, David! I’m glad we met. We’ll see each other again, I’m
sure.”&lt;/p&gt;
&lt;p&gt;David nodded and watched her walk into the hot, dry evening.&lt;/p&gt;
&lt;p&gt;“Get out of the doorway, sonny! You getting off the bus or not?”&lt;/p&gt;
&lt;p&gt;David started at the driver’s call. “Right. Uh. Sorry.”&lt;/p&gt;
&lt;p&gt;He sat back down and let the bus pull him through the streets.&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;p&gt;&lt;span class=&quot;newthought&quot; id=&quot;greasy-yellow-city-light&quot;&gt;&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2025/04/04/lamp-of-the-body/#greasy-yellow-city-light&quot;&gt;&lt;/a&gt;Greasy yellow city light&lt;/span&gt; made its way through the window blinds, falling on a baby blue
notebook atop a coffee table. On the floor nearby, David rifled through the satchel of VHS tapes.&lt;/p&gt;
&lt;p&gt;Some of that week’s films were obvious. &lt;em&gt;Piecemeal&lt;/em&gt; wasn’t going to fall below NC-17.
Not with that much blood. The child’s death was overkill. That scene had to be cut, at a
minimum, if the producers hoped to get down to R. And those severed limbs, sorted in Ziploc—&lt;/p&gt;
&lt;p&gt;A fit of coughs erupted from David’s throat, as he choked on his own held breath. He
tossed that tape aside and continued his search, lingering at &lt;em&gt;Last Spring&lt;/em&gt;. What was Valenti
thinking? Some lines were blurry, sure. Adultery was not one of them. Affairs were never PG.
The child’s birthday, the celebration, the singing and cake, did nothing to disguise the moaning
behind the wall.&lt;/p&gt;
&lt;p&gt;Valenti’s cold eyes drilled into David’s vision: “You aren’t here to climb inference
ladders.” “Do not be the reason why this project is delayed.” “You are wasting millions of
dollars.” “Get your head out of your ass.”&lt;/p&gt;
&lt;p&gt;The images continued to molest David’s mind, each more crooked than the last. Needles
and money and fire and flesh and…&lt;/p&gt;
&lt;p&gt;“Honey, is everything okay?”&lt;/p&gt;
&lt;p&gt;Abigail slipped into the living room and switched on a lamp. David winced at the dim
light flooding his eyes.&lt;/p&gt;
&lt;p&gt;“Not now, Abby. I’m working.”&lt;/p&gt;
&lt;p&gt;“David, it’s Friday. You have all weekend to watch… what is it?” She tiptoed over to the
nearest tape and peered at the label. David snatched the box back and put it in his satchel.&lt;/p&gt;
&lt;p&gt;“Abigail, please. These aren’t for public distribution. You know better than to look.
Where’s Ben?”&lt;/p&gt;
&lt;p&gt;Abigail stared at her husband’s hunched back. She swallowed. “He’s all tucked in. We
just said prayers.”&lt;/p&gt;
&lt;p&gt;David glanced at the clock on the mantelpiece: 10:26 PM. “Kind of past his bedtime, isn’t
it?”&lt;/p&gt;
&lt;p&gt;“He was waiting for you.”&lt;/p&gt;
&lt;p&gt;No response came from David. Abigail crossed to the couch next to the pile of tapes and
sat, her hand rubbing her belly’s slight bulge.&lt;/p&gt;
&lt;p&gt;“David, do you think—do you like this? This ratings job?”&lt;/p&gt;
&lt;p&gt;“Of course.” He still refused to look at her.&lt;/p&gt;
&lt;p&gt;“I just feel like you’re consumed by it. I’m not sure how good this is for our family—”&lt;/p&gt;
&lt;p&gt;“Abby, there are families all over the country that rely on these ratings. This is about
more than protecting us. Okay?”&lt;/p&gt;
&lt;p&gt;“Oh honey, I respect that, you know I do…”&lt;/p&gt;
&lt;p&gt;David found his weekend assignment, &lt;em&gt;Chicken Wire&lt;/em&gt;, in the pile. He scooted over to the
VHS player, tape in hand. Abigail slid to the floor next to him and grabbed his arm, and for the
first time that evening they looked face to face. She reached to his empty hand and brought it to
her chest.&lt;/p&gt;
&lt;p&gt;“David, not tonight. Come to bed. I miss you.”&lt;/p&gt;
&lt;p&gt;He gazed into her eyes, then to his hand resting on her. A heartbeat passed. David looked
back to the tape in his grasp.&lt;/p&gt;
&lt;p&gt;“I’m not in the mood tonight.” He moved his hand to her abdomen. “I don’t think you
are, either.”&lt;/p&gt;
&lt;p&gt;Abigail climbed to her feet, turned, and made her way to the bedroom alone. David fired
up the television and inserted his tape.&lt;/p&gt;
&lt;p&gt;“And Abby, could you get the light? Thanks.”&lt;/p&gt;
&lt;p&gt;“Yeah.” The warmth of the lamp evaporated, and she left David in the flickering glow of
the screen.&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;p&gt;&lt;span class=&quot;newthought&quot; id=&quot;%E2%80%9Ci%E2%80%99m-glad-we&quot;&gt;&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2025/04/04/lamp-of-the-body/#%E2%80%9Ci%E2%80%99m-glad-we&quot;&gt;&lt;/a&gt;“I’m glad we&lt;/span&gt; came to a consensus there, David. It took a bit, but I think you’re warming
up to this role.”&lt;/p&gt;
&lt;p&gt;“Thank you, Mr. Valenti.”&lt;/p&gt;
&lt;p&gt;The remaining board members trickled out of the conference room, and David finished
packing his satchel. The two of them made their way to the elevators and out into the lobby.&lt;/p&gt;
&lt;p&gt;“Listen, David. On Thursday a few representatives from back east will be in the area to
discuss next season’s release priorities. I think you’d do well getting this run-down straight from
the horse’s mouth. You can join us for dinner on Thursday.” Valenti looked askance at David.
“That is, unless something with your family gets—”&lt;/p&gt;
&lt;p&gt;“No, that won’t be a problem.”&lt;/p&gt;
&lt;p&gt;“Good.” Valenti strode toward the parking deck while David turned to the waiting bus.
“See you tomorrow.”&lt;/p&gt;
&lt;p&gt;“Yes, sir.”&lt;/p&gt;
&lt;p&gt;David stepped onto the bus and saw Beth in her usual position by the back door. Her skirt
revealed unblemished legs and outlined the curve of her hips. As she turned, David snapped his
gaze to her face.&lt;/p&gt;
&lt;p&gt;“Hey, Beth.”&lt;/p&gt;
&lt;p&gt;“Hi, David!”&lt;/p&gt;
&lt;p&gt;David took a seat nearby. As the bus pulled away, David located his notebook, cover
sleek and black as midnight, and began his usual evening journal.&lt;/p&gt;
&lt;/section&gt;
</description>
      <pubDate>Fri, 04 Apr 2025 00:00:00 GMT</pubDate>
      <dc:creator>Neill Robson</dc:creator>
      <guid>https://neillrobson.com/blog/2025/04/04/lamp-of-the-body/</guid>
    </item>
    <item>
      <title>Batched Processing in RxJS</title>
      <link>https://neillrobson.com/blog/2024/04/15/rxjs-batched-processing/</link>
      <description>&lt;section&gt;
&lt;p&gt;When you have a ton of data that all needs to be processed, reactive programming makes the implementation easy to read, terse to write, and efficient to run.
But when the data isn’t all needed, and processing the full stream is prohibitively expensive, more esoteric methods are necessary.&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2024/04/15/rxjs-batched-processing/#context&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;context&quot;&gt;Context&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Say you have an array or stream of image files. You want to send them off to a service that runs image recognition, to identify pictures with cats in them.
You want specifically the &lt;em&gt;first four&lt;/em&gt; pictures with cats. Not just any four pictures with cats: perhaps the source array is already sorted by timestamp and you want the most recent four cat pictures.&lt;/p&gt;
&lt;p&gt;Stream processing, asynchronous actions… This sounds like a job for reactive programming! However, you have a couple of unique concerns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The image recognition API is expensive to call. You don’t want to be charged for unnecessary requests.&lt;/li&gt;
&lt;li&gt;The image recognition API takes a long time for each file. You want to parallelize your processing, if possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even with those considerations, you’re pretty sure some creative pipelines will do the trick. You bust out your RxJS library and get started.&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2024/04/15/rxjs-batched-processing/#concatenation&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;concatenation&quot;&gt;Concatenation&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Calling an asynchronous API for each item in an observable stream is a classic use case for one of the &lt;code&gt;*Map&lt;/code&gt; operators. Every operator in that family will create a new stream for each item in the source stream, then collapse the outputs into a single stream to pass down the pipeline.&lt;/p&gt;
&lt;p&gt;Some of the map operators are clearly inappropriate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;switchMap&lt;/code&gt; drops old streams as soon as new source data comes in. We don’t want to lose any responses from the API.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exhaustMap&lt;/code&gt; ignores the source data stream while it waits for each created stream to complete. We want to check every image until we have four cats.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We really just want concatenation of our API calls, so &lt;code&gt;concatMap&lt;/code&gt; seems like a good choice. Our pipeline would look something like:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;sourceImages$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;concatMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;identifyImage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isCatImage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sendToMyPhone&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s a clean pipeline! But in practice, this implementation processes the source images serially. Each API call must be returned before the next image is sent off.
For a slow API, such serial processing is undesirable.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://neillrobson.com/assets/images/2024/04/15/rxjs-batched-processing/serial.png&quot; alt=&quot;visualization of serial pipeline processing&quot; title=&quot;The top pipeline represents queries sent to the API. The number on each data point is the number of queries happening in parallel. The bottom pipeline contains the four images identified as cats, emitted at the time they were identified.&quot;&gt;&lt;figcaption&gt;The top pipeline represents queries sent to the API. The number on each data point is the number of queries happening in parallel. The bottom pipeline contains the four images identified as cats, emitted at the time they were identified.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2024/04/15/rxjs-batched-processing/#merging&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;merging&quot;&gt;Merging&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;We’ve got a fourth member of the &lt;code&gt;*Map&lt;/code&gt; family: &lt;code&gt;mergeMap&lt;/code&gt;. On the surface, it looks like precisely the operator we need.
It creates child streams and merges them into the output stream as soon as input data arrives.&lt;/p&gt;
&lt;p&gt;Implementing it yields nearly identical pipeline code:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;sourceImages$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;mergeMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;identifyImage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isCatImage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sendToMyPhone&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Testing it out yields a result worse than we started with: &lt;strong&gt;the order of the source images is no longer preserved&lt;/strong&gt;. We start seeing cat pictures from decades ago, simply because they happened to be the first ones returned by the API.&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2024/04/15/rxjs-batched-processing/#maintaining-order&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;maintaining-order&quot;&gt;Maintaining Order&lt;/h2&gt;
&lt;/div&gt;
&lt;div class=&quot;margin left&quot;&gt;&lt;figure&gt;
&lt;img src=&quot;https://neillrobson.com/assets/images/2024/04/15/rxjs-batched-processing/parallel.png&quot; alt=&quot;visualization of parallel pipeline processing&quot; title=&quot;Every single image is sent to the API in parallel. There were 21 images in the sample dataset, but the fourth cat image was the 17th item: we sent off four unnecessary API requests.&quot;&gt;&lt;figcaption&gt;Every single image is sent to the API in parallel. There were 21 images in the sample dataset, but the fourth cat image was the 17th item: we sent off four unnecessary API requests.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;&lt;p&gt;As it turns out, the serialization of streams in &lt;code&gt;concatMap&lt;/code&gt; (only creating a new stream when the previous one has completed) is a feature unique to that operator.
If we simply split out the “map” part of the operator from the concatenation, we get the best of both worlds:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All of the streams are created up front (in the &lt;code&gt;map&lt;/code&gt; operator)&lt;/li&gt;
&lt;li&gt;The order of the streams’ output is preserved&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;margin right&quot;&gt;&lt;p&gt;In between map and concatAll, each object in the stream is… itself a stream. Streamception!&lt;/p&gt;
&lt;/div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;sourceImages$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;identifyImage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;concatAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isCatImage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sendToMyPhone&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This pipeline fixes both our ordering issue, and also runs completely parallelized. We get super excited, until we view our monthly bill from the image recognition service.
As it turns out, this pipeline sends &lt;em&gt;every single image&lt;/em&gt; to the API, as soon as it shows up in our source stream. We might send off thousands of requests before the four cat images are identified, even if the cat images are the first four images in the source stream!&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2024/04/15/rxjs-batched-processing/#side-note%3A-hot-vs-cold&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;side-note%3A-hot-vs-cold&quot;&gt;Side Note: Hot vs Cold&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;If you’re trying out this code on your own, you might find that your &lt;code&gt;map&lt;/code&gt;/&lt;code&gt;concatAll&lt;/code&gt; implementation did not parallelize like you wanted it to. Most likely, it’s a result of implementing &lt;code&gt;identifyImage&lt;/code&gt; as a pure RxJS stream, otherwise known as a “cold” observable. The difference between cold and hot observables is simple to state, hard to internalize:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cold observables have their data created &lt;em&gt;inside&lt;/em&gt; the observable&lt;/li&gt;
&lt;li&gt;Hot observables have their data created &lt;em&gt;outside&lt;/em&gt; the observable&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;column two&quot;&gt;&lt;h3&gt;Cold&lt;/h3&gt;
&lt;p&gt;If I make an Observable from an array, &lt;code&gt;from([1, 2, 3])&lt;/code&gt;, all of the data is already there. The computer doesn’t have to wait for anyone to get data back to it for the stream to both start and complete immediately.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They don’t start emitting values until someone &lt;code&gt;subscribe&lt;/code&gt;s to them&lt;/li&gt;
&lt;li&gt;They run a separate, unique pipeline for each subscription (they are “&lt;strong&gt;unicast&lt;/strong&gt;”)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;div class=&quot;column two&quot;&gt;&lt;h3&gt;Hot&lt;/h3&gt;
&lt;p&gt;Hot observables are made from things like Promises. The computer is waiting for someone else to get back to it, and the computer will emit whatever it receives as soon as it arrives.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They emit items upon arrival, regardless of subscriber count&lt;/li&gt;
&lt;li&gt;They send data through a single pipeline, no matter how many subscribers (they are “&lt;strong&gt;multicast&lt;/strong&gt;”)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;Returning to our pipeline above: if we &lt;code&gt;map&lt;/code&gt; data to a &lt;em&gt;hot&lt;/em&gt; observable, the API request goes out immedately (no need for a subscriber). The &lt;code&gt;concatAll&lt;/code&gt; &lt;em&gt;does&lt;/em&gt; end up subscribing, but the API request is already processing at that point. As each API call returns, &lt;code&gt;concatAll&lt;/code&gt; will subscribe to the next one in the stream. Most likely, that latter API call will have already returned, so &lt;code&gt;concatAll&lt;/code&gt; receives an immediate value, and continues.&lt;/p&gt;
&lt;p&gt;On the other hand, &lt;code&gt;map&lt;/code&gt;ping to a &lt;em&gt;cold&lt;/em&gt; observable doesn’t kick off any process at all. The &lt;code&gt;concatAll&lt;/code&gt; subscribes to the first observable, and waits for it to complete. Then it subscribes to the second observable, which hasn’t been doing anything up to this point because it’s cold (and had no subscribers)… and the effect is serialization.&lt;/p&gt;
&lt;p&gt;If you want to mimic Promises in your &lt;code&gt;indentifyImage&lt;/code&gt; implementation, &lt;strong&gt;use the &lt;code&gt;shareReplay&lt;/code&gt; operator&lt;/strong&gt; in your pipeline. For example:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;identifyImage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pipeline &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;img&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// simulated delay&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;yep this is a cat&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;shareReplay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    pipeline&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// No argument needed: just kick off processing&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; pipeline&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;shareReplay&lt;/code&gt; operator turns your pipeline into a multicast (hot) pipeline, and also replays past events for subscribers who hop on board after data has already arrived.&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2024/04/15/rxjs-batched-processing/#batching&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;batching&quot;&gt;Batching&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;We managed to get API call parallelization, while still preserving data order, but we’re calling the API way too much.
We need to design a way for the pipeline to only process the data it knows it could use, and terminate early once the four desired cat images are identified.&lt;/p&gt;
&lt;p&gt;By definition, we know that full parallelization of the API calls on the input data is not efficient in most cases. The exception is when there are four or less cat pictures in the entire data set, &lt;em&gt;and&lt;/em&gt; the last cat picture is at the very end.&lt;/p&gt;
&lt;p&gt;Assuming that cat pictures relatively frequent, and spread evenly throughout the input dataset, a more cost-efficient strategy would be to query the API in batches.
For each batch returned, we can add the cat images to our result dataset, and then adjust our batch size based on how many slots remain for us to fill.&lt;/p&gt;
&lt;p&gt;RxJS provides a &lt;code&gt;bufferCount&lt;/code&gt; operator which looks promising, but the buffer size is fixed when the operator is defined. A fancier operator, &lt;code&gt;buffer&lt;/code&gt;, uses a second Observable to determine when to cut/emit batches of data. It’s flexible, but also makes our solution dependent on the timing of our source data observable: an extraneous, unimportant factor.&lt;/p&gt;
&lt;p&gt;We’d prefer to suspend our input stream entirely, until we’ve processed a batch of results. The &lt;code&gt;zipWith&lt;/code&gt; operator comes in handy here! It’ll emit pairs of values from two Observable streams, &lt;em&gt;only when both of them have a value available&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; batcher$ &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Subject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

sourceImages$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;zipWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;batcher$&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// emits tuples of [image, batcherOutput]&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;img&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;identifyImage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;img&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// we only care about the image&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;concatAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isCatImage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sendToMyPhone&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;batcher$&lt;/code&gt; stream controls when each source image goes through the pipeline. If we call &lt;code&gt;batcher$.next()&lt;/code&gt; four times in succession, four images will immediately go into processing (assuming four images are available to process).&lt;/p&gt;
&lt;p&gt;How do we initialize and manage &lt;code&gt;batcher$&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;We know that, when an image comes through that &lt;em&gt;isn’t&lt;/em&gt; a cat, we want to call &lt;code&gt;batcher$.next()&lt;/code&gt; to add another image into processing. If an image is a cat, we don’t need to trigger the batcher, because that output “slot” is filled.&lt;/p&gt;
&lt;p&gt;So we now have actions we want to take for both the positives &lt;em&gt;and&lt;/em&gt; negatives of our &lt;code&gt;filter&lt;/code&gt; operator… meaning that we need something more robust than &lt;code&gt;filter&lt;/code&gt;. Enter the &lt;code&gt;partition&lt;/code&gt; utility, which splits an Observable stream into two streams for the positive and negative items against a filter!&lt;/p&gt;
&lt;div class=&quot;margin right&quot;&gt;&lt;p&gt;Since we are creating (and eventually subscribing to) &lt;em&gt;two&lt;/em&gt; streams with the same source pipeline, we need to “share()” the pipeline to ensure that we aren’t double-calling the API. See the &lt;a href=&quot;https://neillrobson.com/blog/2024/04/15/rxjs-batched-processing/#side-note%3A-hot-vs-cold&quot;&gt;hot versus cold&lt;/a&gt; section for details.&lt;/p&gt;
&lt;/div&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; batcher$ &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Subject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cats$&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; notCats$&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    sourceImages$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;zipWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;batcher$&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;img&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;identifyImage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;img&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;concatAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// To prevent double-processing&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    isCatImage
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the &lt;code&gt;cats$&lt;/code&gt; stream, we do the same thing we’ve been doing:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;cats$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sendToMyPhone&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With &lt;code&gt;notCats$&lt;/code&gt;, we need to queue another image for processing on each negative value:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// No need to pass a value to next().&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// batcher$ is just a sentinel.&lt;/span&gt;

notCats$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; batcher$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nothing will run unless &lt;code&gt;batcher$&lt;/code&gt; is primed with a few &lt;code&gt;next()&lt;/code&gt; calls. The initial number of calls will determine the level of parallelism. Since we need four cat images, we’ll set the parallelism to four as well:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Or, just use a for-loop!&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; batcher$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The initial run will send off four API calls at once. The pipeline will maintain four in-flight API calls until one of them returns with a cat. Each cat received will effectively decrement the parallelism, preventing us from over-querying the API after we’ve already received our four cats.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://neillrobson.com/assets/images/2024/04/15/rxjs-batched-processing/batched.png&quot; alt=&quot;visualization of batched pipeline processing&quot; title=&quot;Notice how up to four parallel API calls are allowed at first. The number drops to three when the first cat is identified, then down to one when two cats are found in quick succession.&quot;&gt;&lt;figcaption&gt;Notice how up to four parallel API calls are allowed at first. The number drops to three when the first cat is identified, then down to one when two cats are found in quick succession.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2024/04/15/rxjs-batched-processing/#conclusion&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Here’s the final pipeline we created:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NUM_CATS&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; batcher$ &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Subject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cats$&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; notCats$&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    sourceImages$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;zipWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;batcher$&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;img&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;identifyImage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;img&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;concatAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    isCatImage
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

cats$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NUM_CATS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sendToMyPhone&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

notCats$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; batcher$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NUM_CATS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; batcher$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although it got a little unweildy, this architecture does everything we wanted it to: identified and filtered a specific number of cat images out of a large input set, using parallel processing while also being frugal about extraneous API calls.&lt;/p&gt;
&lt;p&gt;This simple problem statement and exercise highlights many key concepts in RxJS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Observable streams aren’t limited to containing data. They are also useful in scheduling and behavioral control of pipelines.&lt;/li&gt;
&lt;li&gt;Cold observables are lazy, a behavior that often leads to counterintuitive results when multiple subscribers are involved. If you only want a pipeline run once, &lt;code&gt;share()&lt;/code&gt; it.&lt;/li&gt;
&lt;li&gt;Pipelines don’t have “memory” on their own. Changing future behavior based on past results requires creative solutions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RxJS can be incredibly difficult to wrap one’s head around, and complicated to write.
If your team is slowed down or blocked by an exotic pipeline you wrote, I encourage you to remember: &lt;code&gt;for&lt;/code&gt;-loops are perfectly acceptable.
Don’t sacrifice readability for glamor and elegance.
But when the opportunity to wrestle with RxJS does arise, I find that the satisfaction of a solid solution is worth the puzzling challenge!&lt;/p&gt;
&lt;p&gt;My hope is that this little exploration satisfied your curiosity too.&lt;/p&gt;
&lt;/section&gt;
</description>
      <pubDate>Mon, 15 Apr 2024 17:47:00 GMT</pubDate>
      <dc:creator>Neill Robson</dc:creator>
      <guid>https://neillrobson.com/blog/2024/04/15/rxjs-batched-processing/</guid>
    </item>
    <item>
      <title>Small Group Leadership Brunch Speech</title>
      <link>https://neillrobson.com/blog/2024/01/18/leadership-full/</link>
      <description>&lt;section&gt;
&lt;p&gt;The following is a written draft of a speech I gave to a gathering of small group
leaders at my church several months ago. After running across the file, I felt it
might be encouraging for others to read.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;One cold February evening a couple of years ago, as folks were saying their
goodbyes after small group, the leaders approached me and asked if I’d be
interested in learning to lead, as they both had other commitments and callings
taking them elsewhere over the coming months. Excited by the opportunity, I
accepted.&lt;/p&gt;
&lt;p&gt;Just a few weeks later, a pandemic swept the globe,
and the small group’s meetings for the remainder of the semester were
reduced to Jack-box games on Zoom. With all the chaos, we decided to put the
group on hold for the summer and, as new leaders, we’d circle back in the fall
when things calmed down a bit.&lt;/p&gt;
&lt;p&gt;As you all might recall, things didn’t calm down. For the next nine months, my
small group leadership experience was inaugurated on conference calls, many of
which were taken from the same room where my diapers were changed a quarter of a
century ago.&lt;/p&gt;
&lt;p&gt;It was awkward; it was confusing; despite us all doing everything we thought was good to build community, we had
never felt more alone.&lt;/p&gt;
&lt;p&gt;If you’re anything like me, you hear a story like that, and your God-given
instinct for redemption and justice says, “Wow! Those were some tough times:
clearly God was working miracles for the devil to be fighting so hard!” You’re
looking forward to me turning the page and describing transformation. “Isn’t it
such a joy going through those trials, watching Satan squirm before the
inevitable fall?”&lt;/p&gt;
&lt;p&gt;I want to be transparent with you all. We talk to each other about these battles
as though every move is choreographed, every attack hits armor. But the enemy
plays dirty; the enemy isn’t ashamed to hit low; why would he do otherwise?&lt;/p&gt;
&lt;p&gt;By April of 2021 I didn’t have hope. My eyes were dim, only able to see my own
life stagnating as the world—even others in the small group—seemed to move
on. I talked to Micah, handed off the leadership, and stepped away for a few
months. Even upon returning, I was a passive and hesitant member of Marshall’s
group. It was only through his unprecedented patience, encouragement, and
example that I started leading again.&lt;/p&gt;
&lt;p&gt;So why do we lead? Why do I? Not every sun rises, when it comes to our own
perspective and desires. Sometimes things fall apart, and no matter who you talk
to and how much you pray, nothing tells you where you might have gone wrong.&lt;/p&gt;
&lt;p&gt;I was encouraged by Lee’s sermon on Rahab last Sunday. The question stuck with
me: would Rahab’s actions have been any more or less faithful if Jericho’s
outcome were different? Surely there was a bakery in that city she loved to
visit. She never got to taste that bread again. A lively street corner, a
rooftop with a serene view of the sunset, all was wiped out—despite Rahab
doing everything in her power to live out faith in a God she had only heard
rumors of.&lt;/p&gt;
&lt;p&gt;Was she content with that outcome?&lt;/p&gt;
&lt;p&gt;God is a God of miracles, yes. But I often forget that God’s miracles span
generations, even millennia. Rahab became part of the earthly lineage of Jesus.
But in the moment of her walking away from the ruins of Jericho, she could not
possibly turn to that reality for comfort. But she could turn to her father, her
family, alive by her side.&lt;/p&gt;
&lt;p&gt;I do not have a sublime miracle to point to that justifies the difficult times.
But I do have a conversation with a friend who was struggling with lying to a
family member, and decided to come clean. I do have the piercing and loving
advice from co-leaders, guidance that has led me through battles with anxiety
and lust.&lt;/p&gt;
&lt;p&gt;They may not be big things. They may not be what we want in the next month, or
next year. But even if we never see the grand outcome in this lifetime, we can
rest knowing that God—the God who loves us, pays our debt for us—he delights
in seeing our faith. He’s writing an awesome story, spanning generations, and
he’s glad we’re taking a part in it.&lt;/p&gt;
&lt;p&gt;That’s why I lead.&lt;/p&gt;
&lt;/section&gt;
</description>
      <pubDate>Thu, 18 Jan 2024 02:22:00 GMT</pubDate>
      <dc:creator>Neill Robson</dc:creator>
      <guid>https://neillrobson.com/blog/2024/01/18/leadership-full/</guid>
    </item>
    <item>
      <title>Invisalign of the Heart</title>
      <link>https://neillrobson.com/blog/2023/03/06/invisalign-of-the-heart/</link>
      <description>&lt;section&gt;
&lt;p&gt;For the second time in my life, I am undergoing the tedious and painful
experience of tooth re-alignment. As a coping mechanism, why not pontificate on
how Invisalign can serve as a spiritual allegory?&lt;/p&gt;
&lt;p&gt;There are worse ways to cope, I suppose.&lt;/p&gt;
&lt;hr&gt;
&lt;div class=&quot;margin right&quot;&gt;&lt;figure&gt;
&lt;img src=&quot;https://vkdds.com/wp-content/uploads/2020/09/invisalign-770x460-1.jpg&quot; alt=&quot;mouth with Invisalign&quot; title=&quot;I can&#39;t believe it&#39;s not braces!&quot;&gt;&lt;figcaption&gt;I can’t believe it’s not braces!&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;&lt;p&gt;After completely forgetting the horrors of middle school braces, over the past
several years I allowed myself to lose my retainer and let my teeth slip—just
enough to warrant a few months of Invisalign to get things on the right track.
Hearing from my orthodontist the options, Invisalign seemed like an effortless
remedy for the consequences of my past neglect: transparent plastic, removable
at any time, no pain from popped wires, no eating restrictions… Life would be
great!&lt;/p&gt;
&lt;p&gt;But as any teenager or adult with recent orthodontic treatment will tell you,
Invisalign is &lt;em&gt;not&lt;/em&gt; a walk in the park, especially jumping into the process
“fresh” without recent braces or retainer use.&lt;/p&gt;
&lt;div class=&quot;margin left&quot;&gt;&lt;figure&gt;
&lt;img src=&quot;https://st3.depositphotos.com/11203256/18962/v/600/depositphotos_189625402-stock-illustration-tooth-cut-medical-diagram-structure.jpg&quot; alt=&quot;cross-section diagram of tooth&quot; title=&quot;A misleading picture: the spongy texture of the alveolar bone is a far cry from the pain you feel when pressure is applied.&quot;&gt;&lt;figcaption&gt;A misleading picture: the spongy texture of the alveolar bone is a far cry from the pain you feel when pressure is applied.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;&lt;p&gt;Your teeth are always slightly mobile: if not, how would they move out of
alignment in the first place? The roots sit in a container of dense cartilage,
similar to the material that shapes your nose. No matter how tough, however,
cartilage is still movable. Natural chewing, clenching, and activity will put
pressure on the teeth that allow the cartilage to shift, break down, and re-form
over the course of years.&lt;/p&gt;
&lt;div class=&quot;margin right&quot;&gt;&lt;p&gt;*&lt;a href=&quot;https://www.biblegateway.com/verse/en/Song%20of%20Solomon%204%3A2&quot;&gt;Yep, it’s biblical.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;Orthodontic treatments all capitalize on this same flexibility when putting
one’s teeth back in place. They put constant pressure on the teeth to move them
in new directions, out of the way of others and into two perfect rows of
freshly-shorn sheep*. Furthermore, this pressure is applied in an extreme and
optimal way, to expedite the alignment process and overcome the natural
pressures of biting and chewing.&lt;/p&gt;
&lt;p&gt;Invisalign in particular is a coveted form of treatment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It can be removed at any time&lt;/li&gt;
&lt;li&gt;It is transparent: nearly invisible to onlookers&lt;/li&gt;
&lt;li&gt;Breakages or malfunctions do not typically cause pain (unlike popped wires
from braces)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, given all of those benefits, who am I to complain?&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2023/03/06/invisalign-of-the-heart/#i%E2%80%99m-still-going-to-complain&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;i%E2%80%99m-still-going-to-complain&quot;&gt;I’m Still Going to Complain&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Upon forking over the several hundred dollars for the retainer and popping it
in, I enjoyed a about five seconds of satisfaction with my purchase before the
buyer’s remorse started to kick in.&lt;/p&gt;
&lt;p&gt;I first noticed how difficult it was to speak properly with this plastic in my
mouth. I suddenly had a mild and annoying lisp, a speech impediment that wasn’t
quick to disappear with a bit of practice. You can only imagine my embarrassment
at work, attempting to lead meetings about “cruthial bithnith dethithions” and
constantly apologizing for my lisp.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If Invisalign is supposed to be invisible, why must I preface every
conversation with an apology about their existence?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The pain kicked in after about eight hours. The tooth aching was anticipated: I
knew that moving teeth around would create some adjustment pains. The unexpected
issue was the dreadful irritation and cutting of my gums and tongue. For nearly
a week, the flesh in my mouth revolted against the foreign plastic encasing my
teeth, becoming covered in scrapes and sores rendering even soft foods painful
to consume. In vain I acquired emery boards to sand down the “sharp” edges of
the retainer, only to realize that the edges were already perfectly smooth: my
mouth simply hated the mere presence of the equipment.&lt;/p&gt;
&lt;p&gt;My lips were constantly chapped, dining was an excruciating ordeal, and my every
word reminded the whole vicinity of the new operation taking place on my teeth.&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2023/03/06/invisalign-of-the-heart/#the-second-hole-is-the-hardest&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;the-second-hole-is-the-hardest&quot;&gt;The Second Hole is the Hardest&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;“Surely things got better after that first adjustment period! Folks wear these
for several years: it can’t be that bad!”&lt;/p&gt;
&lt;p&gt;Yes, the initial pain did recede after that first week. My lisp was no longer
noticeable, my tongue learned not to scrape against the plastic, and my jaw
adjusted to this new pressure.&lt;/p&gt;
&lt;p&gt;However, I still looked upon the procedure with a fair amount of antipathy. The
pain was gone, but my lifestyle was still significantly impacted.&lt;/p&gt;
&lt;p&gt;You can eat or drink &lt;em&gt;nothing but water&lt;/em&gt; when your equipment is in. Nothing else
is acceptable, even sparkling water. For every meal, snack, or drink, at home or
on the road, for fuel or for social occasions, you must remove your Invisalign
with clean hands and stow it in your case. By consequence, you must also carry
your case everywhere—unless you want to wrap your retainer in bathroom paper
towels and leave them out on the table with you.&lt;/p&gt;
&lt;p&gt;When is the last time a tin of chewing tobacco bulging out of your pocket was in
style? Yeah, I can’t remember either.&lt;/p&gt;
&lt;p&gt;You may counter, “but at least you have the flexibility to remove it whenever
you want!” Ah, but the small print in the contract says otherwise: Invisalign
must remain in your mouth &lt;strong&gt;for 22 hours a day&lt;/strong&gt; in order to be effective. Yep,
you read that right.&lt;/p&gt;
&lt;p&gt;“Ah, but two hours across three meals, that’s 40 minutes a meal, you’re fine!”&lt;/p&gt;
&lt;p&gt;How many people do you know that only eat at mealtimes, consuming nothing but
pure water at all other points of the day? No snacks, no coffee or tea, no
Friday-evening happy hour with friends. Especially when considering someone with
a fairly active lifestyle, you simply can’t nourish yourself appropriately
getting all of your calories in just three meals.&lt;/p&gt;
&lt;p&gt;And remember, every single time you remove and replace your Invisalign, you must
first clean your teeth of any food or plaque that has built up as a result of
your indulgence. Twice-a-day dental hygiene doesn’t cut it anymore, because the
plastic barrier around your teeth prevents your saliva and tongue from doing
their natural, gradual decomposition and cleanup of lingering food. You’re
pressing all of that stuff directly against your enamel otherwise.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;So I looked at the life I had made for myself, and felt thoroughly disappointed.
In the evenings I’d inspect my teeth, compare them to Reddit horror stories, and
think to myself, “I’m really not that bad off! There’s one bottom front tooth
that’s slightly out of alignment. Do I really need to spend hundreds of dollars
to move it back? Not to mention the hours of time and mental effort it takes to
maintain this practice. No one sees that tooth when I smile. It’s not causing
any toothaches. Why not just get a nighttime retainer and call it a day?”&lt;/p&gt;
&lt;p&gt;It struck me, as I was making these compromises with myself, how much my
petulance sounded like the complaints I’d often express to God during rough
patches in other areas of my life. In fact, almost everything about Invisalign
seemed quite apropos to compare with the circumstances God uses to grow us.&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2023/03/06/invisalign-of-the-heart/#invisalign-of-the-heart&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;invisalign-of-the-heart&quot;&gt;Invisalign of the Heart&lt;/h2&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;God, create a clean heart for me
and renew a steadfast spirit within me.&lt;/p&gt;
&lt;p&gt;– Psalm 51:10&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It’s a lovely prayer. We recognize the depth of our own transgression, our lack
of alignment with God, and we say, “I’m sorry! Please forgive and repair me!”
Or, perhaps there was no acute wrongdoing, but we see things in our walks with
God that could be better, and we ask him to work in us and transform us into his
image.&lt;/p&gt;
&lt;div class=&quot;margin left&quot;&gt;&lt;figure&gt;
&lt;img src=&quot;https://www.praise.com/wp-content/uploads/6.09-scaled.jpg&quot; alt=&quot;water running through cupped hands&quot; title=&quot;Does living water stain Invisalign? 🤔&quot;&gt;&lt;figcaption&gt;Does living water stain Invisalign? 🤔&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;&lt;p&gt;Cool! God gladly accepts our request for redemption and sanctification. He
crafts a nifty little plastic mold that is &lt;em&gt;almost&lt;/em&gt; the same shape as our heart,
slaps it in place, and says “For best results, wear it for a minimum of 24 hours
per day.”&lt;/p&gt;
&lt;p&gt;We’re excited for about five seconds. Then we try to do some of the most basic
things that used to fill our lives (speak! eat!), and find that everything has
become unnatural, uncomfortable. All of our old activities now have this ball
and chain tied to them.&lt;/p&gt;
&lt;p&gt;Just like Invisalign, sanctification is not often seen or recognized by our
peers, yet it is a constant presence (dare I say, inconvenience) in our own
lives. Folks notice the side effects: for Invisalign, “where did that lisp
come from?” or, “are you on a new diet?” and for sanctification, “you used to be
much funnier! Relax!” or, “remind me again when you became a sober curmudgeon?”&lt;/p&gt;
&lt;p&gt;You just can’t stand having it on all day, so you take it off once in a while
for relief from the discomfort. Looking at your heart, you start thinking, “what
the heck? It’s not really that bad! Certainly not as rough as some folks I see
on Reddit. This whole process isn’t even necessary. I’m wasting my time and
mental health over petty details: let me just be satisfied with who I was.”&lt;/p&gt;
&lt;p&gt;Watching your heart hour by hour, and day by day, you feel the pain but you
don’t see any improvement at all. You still feel drawn to all of your old
life—even more so, now that the habits are in the spotlight with this new
procedure—and the aligner is only causing unnecessary pain.&lt;/p&gt;
&lt;div class=&quot;margin right&quot;&gt;&lt;figure&gt;
&lt;img src=&quot;https://cdn.mos.cms.futurecdn.net/wtGrJj5YzeaNdyCzaurDPe-1200-80.jpg&quot; alt=&quot;soft-body Tetris game&quot; title=&quot;Soft-body Tetris: as if normal Tetris wasn&#39;t infuriating enough.&quot;&gt;&lt;figcaption&gt;Soft-body Tetris: as if normal Tetris wasn’t infuriating enough.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;&lt;p&gt;At regular intervals, God shows up with a new alignment mold for you to wear.
Oftentimes, it pushes against portions of your heart that seem completely
unrelated to the task at hand. It seems that he’s never just satisfied with a
surgical fix of the one issue you originally asked about. He’s playing some
divine game of seven-dimensional Tetris with the pieces of your heart, with an
ostensible disregard for even a bit of your own comfort.&lt;/p&gt;
&lt;p&gt;But God reminds you that this process was never promised to be easy. It would
come with plenty of pain, much of which you wouldn’t understand in the moment.
It’s a long-term commitment—a commitment of a lifetime—and requires patience
and perseverance, even when progress seems slow or you find yourself
backsliding. The adjustments being made are numerous, diverse, and tiny: every
one of them serves a purpose, even if you can’t see their significance in the
moment (or even see the impact at all). Faithfulness and trusting the story will
result in a better version of yourself, though: a version closer to the divine
image in which you were created, closer to the God whose faithful love has
opened a door for you to enjoy an eternal relationship with him.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;God never forces the issue: just like it was your choice to start the treatment,
you can always say “enough” and throw away the aligner. Who knows: maybe you’ve
learned enough good habits at that point to keep your heart healthy for a couple
weeks, or a month or two. I know from experience: it feels pretty good to walk
around with nothing “bothering” my teeth or soul.&lt;/p&gt;
&lt;p&gt;But I also know that freedom only lasts for so long. If God isn’t straightening
my heart (or the aligner isn’t straightening my teeth), the world has plenty of
pressures that take me any number of different directions.&lt;/p&gt;
&lt;p&gt;Now, is my orthodontist God? Certainly not! Nor do I think I’ll be making
transformative spiritual changes based on this little analogy. But, at the very
least, it has given me a bit more strength to continue wearing these darn
plastic sheets in my mouth!&lt;/p&gt;
&lt;/section&gt;
</description>
      <pubDate>Mon, 06 Mar 2023 19:53:00 GMT</pubDate>
      <dc:creator>Neill Robson</dc:creator>
      <guid>https://neillrobson.com/blog/2023/03/06/invisalign-of-the-heart/</guid>
    </item>
    <item>
      <title>Typescript&#39;s Skeleton Key</title>
      <link>https://neillrobson.com/blog/2022/11/01/typescripts-skeleton-key/</link>
      <description>&lt;section&gt;
&lt;p&gt;The intrepid Typescript developer will find several types that, frankly, make no sense whatsoever in real life. A “string” or “number” is perfectly reasonable, but what is an “unknown” or “never” type?&lt;/p&gt;
&lt;p&gt;More importantly, what in the world is a “keyof never”?&lt;/p&gt;
&lt;div class=&quot;margin right&quot;&gt;&lt;p&gt;In case the introduction didn’t make the fact clear, this post will be pretty technical. Be forewarned!&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;First, we’ll need a bit of background on how types can be combined in Typescript to create new, more complicated types. The rules take after formal logic and set theory, but the end result is still pretty intuitive.&lt;/p&gt;
&lt;p&gt;Let’s pretend we have two plain object types, &lt;code&gt;Vehicle&lt;/code&gt; and &lt;code&gt;Animal&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vehicle&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    speed&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    legs&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2022/11/01/typescripts-skeleton-key/#union&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;union&quot;&gt;Union&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Perhaps we also want a function that accepts either a &lt;code&gt;Vehicle&lt;/code&gt; or &lt;code&gt;Animal&lt;/code&gt; and returns its name. How would we write that function and its signature?&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entity&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Vehicle &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; Animal&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; entity&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice a few things about this function:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The parameter can either be a &lt;code&gt;Vehicle&lt;/code&gt; or &lt;code&gt;Animal&lt;/code&gt;, &lt;em&gt;but not both&lt;/em&gt;. In other words, if you pass in something that has a name &lt;em&gt;and&lt;/em&gt; speed &lt;em&gt;and&lt;/em&gt; legs, you’ll get an error.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because the object can only be one or the other type, the only property that is guaranteed to exist on the object is &lt;code&gt;name&lt;/code&gt;. If we tried to access any other property on the object (without additional typecasting or narrowing), again, we’d get an error.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;union&lt;/strong&gt; type operator &lt;code&gt;|&lt;/code&gt; is used when we want instances that are exactly one of the component types specified.&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2022/11/01/typescripts-skeleton-key/#intersection&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;intersection&quot;&gt;Intersection&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Now, we could also have an object (one that is currently untyped) called “horse”:&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; horse &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    speed&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    legs&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Spirit&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The horse is both a &lt;code&gt;Vehicle&lt;/code&gt; and an &lt;code&gt;Animal&lt;/code&gt;, because it literally has all of the fields necessary for both types. We can declare that using the following syntax:&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Steed&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Vehicle &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; Animal&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; horse&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Steed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A &lt;code&gt;Steed&lt;/code&gt; can be passed into the &lt;code&gt;getName&lt;/code&gt; function, and indeed, it can be used anywhere anyone asks for just a &lt;code&gt;Vehicle&lt;/code&gt;, or just an &lt;code&gt;Animal&lt;/code&gt;, because a &lt;code&gt;Steed&lt;/code&gt; is truly both. That said, any variable defined as a &lt;code&gt;Steed&lt;/code&gt; must have all the fields of both component types: we couldn’t assign “just” an &lt;code&gt;Animal&lt;/code&gt; to a variable of the &lt;code&gt;Steed&lt;/code&gt; type.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;intersection&lt;/strong&gt; type operator &lt;code&gt;&amp;amp;&lt;/code&gt; is used when we want instances that can serve as &lt;em&gt;any&lt;/em&gt; of the component types specified at &lt;em&gt;all&lt;/em&gt; times.&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2022/11/01/typescripts-skeleton-key/#unknown-and-never&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;unknown-and-never&quot;&gt;Unknown and Never&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Among Typescript’s special-case built-in types are two polar opposites, &lt;code&gt;unknown&lt;/code&gt; and &lt;code&gt;never&lt;/code&gt;. What do those types mean?&lt;/p&gt;
&lt;p&gt;If a variable is an &lt;code&gt;unknown&lt;/code&gt; type, then you can assign any value to it. &lt;em&gt;Anything. Always.&lt;/em&gt; Likewise, a variable with a &lt;code&gt;never&lt;/code&gt; type can not have anything assigned to it. &lt;em&gt;Nothing. At all.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The cases where you’d use either of these types are somewhat esoteric, and I won’t make a comprehensive list here. However, here are a few simpler motivating examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A function that never returns (e.g. always throws an error or goes into an infinite loop) has a return type of, you guessed it, &lt;code&gt;never&lt;/code&gt;. This signature is different from a return type of &lt;code&gt;void&lt;/code&gt;, i.e. when the function does call &lt;code&gt;return;&lt;/code&gt; with no value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A function parameter that could be a variety of things, determined through conditional checks (e.g. &lt;code&gt;if (param === undefined)&lt;/code&gt;), could have a type of &lt;code&gt;unknown&lt;/code&gt; if we were too lazy to create a more specific type.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Relation to Set Theory&lt;/h3&gt;
&lt;p&gt;How might we define &lt;code&gt;unknown&lt;/code&gt; and &lt;code&gt;never&lt;/code&gt; with our union and intersection operators? They would both be infinite sets—impractical to write explicitly in code—but the thought exercise will help us understand some interactions described later in this post.&lt;/p&gt;
&lt;p&gt;The easier type to conceptualize this way is &lt;code&gt;unknown&lt;/code&gt;. Consider: if we want the ability to assign any of three different types to a variable, what syntax would we use? Based on our &lt;code&gt;getName&lt;/code&gt; function parameter, we’d do something like &lt;code&gt;A | B | C&lt;/code&gt;. For five different types, we’d have &lt;code&gt;A | B | C | D | E&lt;/code&gt;… and for truly &lt;em&gt;any type at all&lt;/em&gt;, we’d have an infinitely-long union of types.&lt;/p&gt;
&lt;p&gt;The more difficult type to discern in this way is &lt;code&gt;never&lt;/code&gt;—although, given the parallels so far, the reader might be able to guess where we’re going. When we defined &lt;code&gt;Steed&lt;/code&gt; as &lt;code&gt;Vehicle &amp;amp; Animal&lt;/code&gt;, we could no longer assign &lt;code&gt;Vehicle&lt;/code&gt; or &lt;code&gt;Animal&lt;/code&gt; alone to variables of that type. Furthermore, if we created a longer “intersection type” &lt;code&gt;A &amp;amp; B &amp;amp; C&lt;/code&gt;, with more components, we’d get an increasingly restricted type. It follows that a variable with an infinitely-long intersection type could &lt;em&gt;never&lt;/em&gt; take a value, because no value would have all the properties required of the type.&lt;/p&gt;
&lt;p&gt;So, in summary: &lt;code&gt;unknown&lt;/code&gt; is an infinite union of types; &lt;code&gt;never&lt;/code&gt; is an infinite intersection of types.&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2022/11/01/typescripts-skeleton-key/#the-%E2%80%9Ckeyof%E2%80%9D-utility&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;the-%E2%80%9Ckeyof%E2%80%9D-utility&quot;&gt;The “keyof” Utility&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;This little operator has a pretty simple use: it creates a type consisting of a &lt;em&gt;union&lt;/em&gt; of the possible keys for an object.&lt;/p&gt;
&lt;p&gt;Some code is worth a thousand words:&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    legs&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Equivalent to (&#39;name&#39; | &#39;legs&#39;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AnimalKey&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;keyof&lt;/span&gt; Animal&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The union won’t always just be of strings, either: an array (for example) could yield numeric keys in that union.&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2022/11/01/typescripts-skeleton-key/#keyof-with-unions-and-intersections&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;keyof-with-unions-and-intersections&quot;&gt;&lt;code&gt;keyof&lt;/code&gt; with Unions and Intersections&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Think of our old example types of &lt;code&gt;Vehicle&lt;/code&gt;, &lt;code&gt;Animal&lt;/code&gt;, and &lt;code&gt;Steed&lt;/code&gt;. How would &lt;code&gt;keyof&lt;/code&gt; behave with the union and intersection operators?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;keyof (Vehicle | Animal)&lt;/code&gt; would only yield &lt;code&gt;&#39;name&#39;&lt;/code&gt;. Does that feel a bit odd? Remember, &lt;code&gt;Vehicle | Animal&lt;/code&gt; means that each value can only be one or the other type at any given time. When we apply &lt;code&gt;keyof&lt;/code&gt;, the only guaranteed key on the object is the one shared between both types. That’s also why our function &lt;code&gt;getName&lt;/code&gt; was restricted to referencing the &lt;code&gt;name&lt;/code&gt; property.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;keyof Steed&lt;/code&gt; (i.e. &lt;code&gt;keyof (Vehicle &amp;amp; Animal)&lt;/code&gt;) would naturally yield all three keys, &lt;code&gt;&#39;name&#39; | &#39;speed&#39; | &#39;legs&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A union type typically &lt;em&gt;decreases&lt;/em&gt; the number of valid keys, while an intersection type typically &lt;em&gt;increases&lt;/em&gt; the number of valid keys.&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2022/11/01/typescripts-skeleton-key/#putting-it-all-together&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;We have enough information now to consider the original question: What is &lt;code&gt;keyof never&lt;/code&gt;? Or &lt;code&gt;keyof unknown&lt;/code&gt;? The answer, while unintuitive, is quite logical!&lt;/p&gt;
&lt;p&gt;Let’s start again with &lt;code&gt;unknown&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;unknown&lt;/code&gt; is an infinite union of types&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a union type typically decreases the number of valid keys&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;keyof unknown&lt;/code&gt; is an infinitely-shrunk set of keys, i.e. an empty set&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The set theory explanation is still confusing, so think about it on a natural-language level. What property is valid for both Vehicles, and Animals, and Reports, and Electrons, and Arrays, and Numbers, and Strings, and anything else you can think of? True, a variable of type &lt;code&gt;unknown&lt;/code&gt; will only ever be one of those actual types at any given time, but (as we saw in the &lt;code&gt;getName&lt;/code&gt; function) we are only allowed to use keys that are shared across all possible types. The question we’re answering with &lt;code&gt;keyof unknown&lt;/code&gt; is “what keys can be used at any time on values of any type anywhere in Typescript?”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Therefore, &lt;code&gt;keyof unknown&lt;/code&gt; is &lt;code&gt;never&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What about &lt;code&gt;keyof never&lt;/code&gt;?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;never&lt;/code&gt; is an infinite intersection of types&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;an intersection type typically increases the number of valid keys&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;keyof never&lt;/code&gt; is the maximal set of keys possible in Typescript, i.e. &lt;code&gt;String | Number | Symbol&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When we combined two types, we got a type that had all the keys of both component types—even though we could no longer &lt;em&gt;assign&lt;/em&gt; values of either component type to the intersection type. As we continue expanding that intersection type, we cover more and more keys, while making it more and more difficult to assign any value to the type… until we reach &lt;code&gt;never&lt;/code&gt;. The question we’re answering with &lt;code&gt;keyof never&lt;/code&gt; is “what keys could possibly, at some point, be syntactically valid in Typescript?”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Therefore, &lt;code&gt;keyof never&lt;/code&gt; is &lt;code&gt;String | Number | Symbol&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2022/11/01/typescripts-skeleton-key/#why-do-we-even-need-this%3F&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;why-do-we-even-need-this%3F&quot;&gt;Why do we even need this?&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Admittedly, it’s mostly a fun thought exercise for me! But there is some marginal benefit.&lt;/p&gt;
&lt;p&gt;If you are trying to define a variant of the &lt;code&gt;Record&lt;/code&gt; type and want to provide no restrictions on what keys are used, you can use the generic type &lt;code&gt;K extends keyof never&lt;/code&gt; to ensure that all valid key types are allowed (and, at the same time, preventing syntactically invalid key types). Granted, you could also use the more explicit &lt;code&gt;String | Number | Symbol&lt;/code&gt;, and you’d be 99.9% sure to cover everything. However, if the language ever evolves in the future to allow a wider (or—somehow—narrower) set of key types, &lt;code&gt;keyof never&lt;/code&gt; would by definition pick up on the change immediately, with no intervention necessary from the developer.&lt;/p&gt;
&lt;p&gt;Crucially, I must urge the reader to not take this rationalization to their supervisors and tech leads in an attempt to justify unreadable code. The vast majority of developers will find it much easier to understand &lt;code&gt;String | Number | Symbol&lt;/code&gt;. Saving that value in a readily-accessible type alias, with an explanatory code comment, is arguably much more maintainable than throwing &lt;code&gt;keyof never&lt;/code&gt; everywhere. However, for those occasions when you see the latter in a codebase, and you’re confused as to how in the world that skeleton key works, think back to set theory. You just might be able to put yourself back on track!&lt;/p&gt;
&lt;/section&gt;
</description>
      <pubDate>Tue, 01 Nov 2022 13:38:00 GMT</pubDate>
      <dc:creator>Neill Robson</dc:creator>
      <guid>https://neillrobson.com/blog/2022/11/01/typescripts-skeleton-key/</guid>
    </item>
    <item>
      <title>Grad School Like I&#39;m Five: Buffer Overflow</title>
      <link>https://neillrobson.com/blog/2020/11/23/grad-school-like-im-five/</link>
      <description>&lt;section&gt;
&lt;p&gt;According to &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;, I’ve written approximately 6,000 lines of code over the course of the past four months (welcome to grad school!).
The question is, can I explain all of the stuff I wrote?
Over the next few blog posts, I’ll be trying to present a high-level overview of some of the most interesting concepts that I’ve learned this past semester.&lt;/p&gt;
&lt;p&gt;How high-level, you ask?&lt;/p&gt;
&lt;p&gt;The goal is to explain these concepts to a five-year-old.&lt;/p&gt;
&lt;p&gt;Not only will this audience choice keep these blog posts short and sweet, it will also help me reassure myself that the boatloads of information I consumed throughout this semester did not simply fall out of my other ear!
And, of course, I hope that you, the reader, find these snippets more entertaining to read than your average textbook chapter.&lt;/p&gt;
&lt;p&gt;For this inaugural episode, we will cover… &lt;strong&gt;Buffer Overflow&lt;/strong&gt;!&lt;/p&gt;
&lt;h1&gt;The Problem&lt;/h1&gt;
&lt;p&gt;Imagine we’re sitting across from each other, with an empty table between us.
The tabletop is wiped so clean, you can see the reflection of the overhead light in the white plastic.
I give you a crayon, and I ask you to draw a cat.
What do you do?
If you’re following my instructions, you’ll probably start drawing a cat directly on the table.
If I’m a self-respecting grown-up, I’ll probably respond by scolding you for drawing on furniture.
But you were only doing what you were told to do!
Grown-ups are so unfair, am I right?&lt;/p&gt;
&lt;p&gt;Okay, I’ll give you a piece of paper: unlined and white, a blank slate for your work of art.
I set it down in front of you, and ask you once again to draw a cat.
And you do!
It’s a cool cat that you draw, and I’m impressed, so I ask you to draw another.
And another.
And another.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://pics.me.me/hey-girl-isaw-you-coloring-inside-the-linesearlierandivejust-gotto-say-7937983.png&quot; alt=&quot;Elementary-aged boy uttering a pickup line to girl&quot;&gt;&lt;/figure&gt;
&lt;p&gt;After a while, you mention how tired you are, and ask to go play with friends for a while.
Happy with your work, I allow you to go, and I reach down to grab the paper with your fantastic cat drawings.
There’s only one problem…&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://www.kenarry.com/wp-content/uploads/2014/09/how-to-get-dry-erase-marker-off-the-wall2.webp&quot; alt=&quot;Whiteboard with dry erase markings on the wall&quot; title=&quot;Mom&#39;s face when she sees you&#39;ve crossed the line&quot;&gt;&lt;figcaption&gt;Mom’s face when she sees you’ve crossed the line&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;You’ve drawn so many cats that you ran out of space on the paper and got markings on the table once again.
With white paper on a white plastic table, who’s to blame you for overstepping those boundaries?&lt;/p&gt;
&lt;p&gt;In a similar way, computers have a large table on which they can write and draw.
Usually, someone like you and me will lay down pieces of paper for the computer, so that when it draws cats for the cat-drawing program, those cats won’t end up on the table or on anyone else’s paper sitting nearby.
But the computer can’t tell the difference between your paper, my paper, its paper, or the table, so unless we are &lt;em&gt;very&lt;/em&gt; specific about the size of what we tell it to draw, it has no problem drawing all over everyone else’s work.&lt;/p&gt;
&lt;p&gt;Not good.&lt;/p&gt;
&lt;p&gt;On top of that, most people give computers enormous amounts of instructions in advance.
Although I just told you to draw one cat at a time (maybe ten cats in all), professional computer people get paid lots of money to tell computers to draw &lt;em&gt;billions&lt;/em&gt; of cats at once in the fastest way possible.
It’s like your math teacher writing up a billion-problem multiplication drill the night before, handing it to you the next morning, and leaving.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://www.1989generationinitiative.org/j/2020/07/times-table-worksheets-activity-shelter-multiplication-drill-counting-money-kindergarten.jpg&quot; alt=&quot;five-minute multiplication drill&quot;&gt;&lt;/figure&gt;
&lt;p&gt;There’s no way to know in advance if you’ll write beyond the lines at some point in that greuling process!&lt;/p&gt;
&lt;h1&gt;The Solution (?)&lt;/h1&gt;
&lt;p&gt;So after cleaning the poor table of all your crayon marks, I decide to fix the problem by using a new type of paper.
This paper, rather than being pure white, has a thick red border around the edges.
We’ll call this border the “red zone.”
Now, when you’re drawing, I can see when your crayon hits the red zone, and choose to change my instructions to you so that you don’t venture beyond that zone.
(Of course, you could also use that red zone to guide yourself, but computers aren’t as smart as you are.)&lt;/p&gt;
&lt;p&gt;In a similar way, I can mark certain edges in the computer’s table (we call that table “memory” in the computer) as dangerous regions (red zones).
Whenever a computer tries to write anything on that zone, the programmer can be notified and jump in to change the instructions (the “program”) so that the computer doesn’t venture past that edge any longer.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://www.simplemost.com/wp-content/uploads/2017/02/7275464206_72432c61cd_o_sidewalk-bumps.jpg&quot; alt=&quot;Child stepping on sidewalk bumps&quot; title=&quot;We have &amp;quot;red zones&amp;quot; in real life too. Sometimes they&#39;re other colors, like yellow.&quot;&gt;&lt;figcaption&gt;We have “red zones” in real life too. Sometimes they’re other colors, like yellow.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;No one should be fooled that this strategy solves all of our problems, though.
The red zone is not &lt;em&gt;preventing&lt;/em&gt; our computer from drawing outside its region—only warning us of its error.
Furthermore, I could easily instruct the computer (or you!) to draw something “new” far outside the bounds of the paper.
For example, say I want you to draw a cloud in the sky above the various cats.
In that case, you could draw that entire cloud without ever touching the red zone that I’ve designated.
When I’m watching you, it’s easy to spot the error, but again, remember that most big-shot computer programmers send in tasks like billion-question multiplication quizzes in advance.
They don’t bother to watch every calculation, but rely on looking at the red zone after the fact to see if their instructions need to be edited.&lt;/p&gt;
&lt;p&gt;I could make larger red zones to catch more of these over-steps, but if I make the red zone too big, then no one would be able to draw anything &lt;em&gt;outside&lt;/em&gt; of the massive red zone!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;So that’s buffer overflows and red zones in a nutshell.&lt;/p&gt;
&lt;p&gt;Those over the age of five might be interested in the open-source tool that I used during my studies to implement a red-zone-based buffer overflow detector.
If so, definitely check out the &lt;a href=&quot;https://dynamorio.org/&quot;&gt;DynamoRIO&lt;/a&gt; runtime code manipulation system and the &lt;a href=&quot;https://github.com/Xuhpclab/DrCCTProf&quot;&gt;DrCCTProf&lt;/a&gt; call path profiling tool built atop DynamoRIO.
I cannot yet release my own code to the public for viewing, as grades for the class are still being calculated, but pending the professor’s permission I will definitely update this blog post with links for interested parties!&lt;/p&gt;
&lt;p&gt;I hope you found this little explanation entertaining and informational.&lt;/p&gt;
&lt;/section&gt;
</description>
      <pubDate>Mon, 23 Nov 2020 20:25:00 GMT</pubDate>
      <dc:creator>Neill Robson</dc:creator>
      <guid>https://neillrobson.com/blog/2020/11/23/grad-school-like-im-five/</guid>
    </item>
    <item>
      <title>Book Review: The Circle, by Dave Eggers</title>
      <link>https://neillrobson.com/blog/2018/02/24/book-review-the-circle-by-dave-eggers/</link>
      <description>&lt;section&gt;
&lt;p&gt;For the first time I can remember in a long while, I did not have the endurance to make it through a book. &lt;em&gt;The Circle&lt;/em&gt; was patronizing, immature, and (as others have already mentioned) offered nothing new to the conversation.  Halfway through the book, I could not recall a single plot development that could not be recreated precisely (often down to the phrasing of the words) from current news or social media. Some speculative literature provides an insightful reflection on human nature; others grant an escape from the world’s worries; Eggers manages to to neither in his work, using such an explicit and leaden pen that one might draw parallels to reading one’s own social media feed.&lt;/p&gt;
&lt;p&gt;The third-person limited point of view tries desperately to inspire the reader’s empathy towards the protagonist, but the narrative thrashes between vapid predictability and deplorable decision-making. Typically, a character’s weaknesses and vulnerabilities evoke some measure of compassion from the audience, but I found no such sympathy for a protagonist so passive and malleable to her own surroundings.&lt;/p&gt;
&lt;p&gt;Far from edifying or subtly cautionary, the mature content smacked of pretentious gossip and schoolboy fantasies. Was Eggers’s intention to copy the fatuous desires and half-baked relationships of modern society to further condemn the digital age? He only managed to add a veneer of erotic language to lessons that anyone mature enough to read his book could glean just as easily from turning on the television.&lt;/p&gt;
&lt;p&gt;In submission, the portion of this book that I forced down my gullet did resonate with my own past experience. The fears and fascinations, challenges and trials that the fictional community faces are present with glaring radiance in my history, and I am by no means worthy of denouncing the lifestyle that this book attempts to critique. But if &lt;em&gt;The Circle&lt;/em&gt; wanted to be a parable, it failed miserably: those of us who would benefit from the perspective this book attempts to provide would more likely find the reading experience an act of navel-gazing, while those capable of gleaning the moral by and large have already discovered it from reflection and experience.&lt;/p&gt;
&lt;p&gt;Maybe I did not represent the intended audience for Eggers, but to dismiss oneself as inappropriate to judge a work that one found repulsive is a self-pitying cop-out. Dave, I want to receive the message you are trying to express, but please instruct me as an adult would exhort an ignorant child: the sources from which I can revel in darkness with fellow miscreants are, as you say, already far to prevalent.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Have you read the book? Watched the movie? (I haven’t yet… should I?) Whether you loved it, hated it, or fall anywhere in between, I would enjoy hearing your opinions in the comments below!&lt;/p&gt;
&lt;/section&gt;
</description>
      <pubDate>Sat, 24 Feb 2018 15:13:00 GMT</pubDate>
      <dc:creator>Neill Robson</dc:creator>
      <guid>https://neillrobson.com/blog/2018/02/24/book-review-the-circle-by-dave-eggers/</guid>
    </item>
    <item>
      <title>The Infamous Liebster Award</title>
      <link>https://neillrobson.com/blog/2018/01/28/the-infamous-liebster-award/</link>
      <description>&lt;section&gt;
&lt;p&gt;As an encouragement to continue sharing my thoughts and experiences online, a person near and dear to my heart nominated me for &lt;a href=&quot;https://theglobalaussie.com/liebster-award-2018/&quot;&gt;the Liebster Award&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://theglobalaussie.com/wp-content/uploads/2017/12/More-Flowers.png&quot; alt=&quot;Liebster Award Logo&quot;&gt;&lt;/figure&gt;
&lt;p&gt;First and foremost, I highly recommend that you check out the blog of my nominator, &lt;a href=&quot;https://volarconmigo.wordpress.com/2018/01/07/liebster-award/&quot;&gt;Further Up and Further In&lt;/a&gt; by La Creadora Fantasma. Like myself, LCF is just beginning to learn how to record her own thoughts and inspire others through online publishing, and I am eager to watch her blossom both professionally and creatively through this experience. Keep it up!&lt;/p&gt;
&lt;p&gt;As it turns out, the “rules” of nomination for the Liebster Award are slightly different from year to year: since 2018 just recently kicked off its opening act, I’ll try and satisfy both the rules given to me by my nominator and the new rules published by the originator. The links to both rulesets are given above.&lt;/p&gt;
&lt;p&gt;Let’s go!&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2018/01/28/the-infamous-liebster-award/#intention-explained&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;intention-explained&quot;&gt;Intention Explained&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Why do I write blogs?&lt;/p&gt;
&lt;p&gt;My journey began when I took a trip abroad to Hangzhou, China, and was seeking a way to memorialize that unique experience and share it with friends and family back home. Being a quixotic techie with a dogged proclivity toward independence, I threw together a self-hosted website on which I built a resume page in spartan HTML/CSS and a &lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost blog&lt;/a&gt; for recording my time in China. Since then, I’ve spent much more time investing in the website’s technology rather than its content (form over function–an incorrigible flaw against which I battle), and have most recently settled on a &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll site&lt;/a&gt; hosted on &lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt; (a platform to help software developers track their code and collaborate) and managed with &lt;a href=&quot;http://prose.io/&quot;&gt;Prose&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://neillrobson.com/assets/images/2018/01/the-infamous-liebster-award/jekyll.png&quot; alt=&quot;Github and Jekyll&quot; title=&quot;Jekyll static website generator, plus Github Pages hosting: A match made in an evil genius&#39;s lab.&quot;&gt;&lt;figcaption&gt;Jekyll static website generator, plus Github Pages hosting: A match made in an evil genius’s lab.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;But, technologies aside, why do I still strive to immortalize my thoughts in text, and publish them online for the world to see? In truth, my motivation comes down to my love for storytelling: using narratives in every form to build connections with others. From the color palletes of the websites I build to the tension of the piano’s vibrations, from the worlds invented through extemporized theatrical performance to the themes shared through a video game, I am in love with communication–especially through non-traditional media. Building a website and contribuing to a blog is one way I believe that I can combine my two somewhat divergent passions–software development and narrative creation–into a single product.&lt;/p&gt;
&lt;p&gt;I also like being able to save and revise drafts of my thoughts: a practice that most other forms of online social media don’t necessarily allow!&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2018/01/28/the-infamous-liebster-award/#questions-answered&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;questions-answered&quot;&gt;Questions Answered&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;I will now attempt to answer the eleven inquiries of my nominator, La Creadora Fantasma:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Apple, Android, Microsoft, or Linux software?&lt;/p&gt;
&lt;p&gt;You’re killing me already! My knee-jerk response is Linux, because I’ve grown up using various Linux distributions for most of my journey so far as a computer scientist and I value the power and freedom of a community in which everyone is able to contribute to the functional development of the software system.&lt;/p&gt;
&lt;p&gt;That said, as I continue to grow in my understanding of various computer technologies, companies, and cultures, I am also beginning to take into account the pragmatic realities of the field. &amp;quot;Open Source&amp;quot; does not necessarily imply an open and inclusive development community. It doesn&#39;t always yield accessible software, and the provided products and services often fail to bring food to the table of their contributors. There is a time for everything, and a season for every activity under the heavens&lt;label for=&quot;sn-1&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input id=&quot;sn-1&quot; type=&quot;checkbox&quot; class=&quot;margin-toggle&quot;&gt;&lt;span class=&quot;sidenote&quot;&gt;Ecclesiastes 3:1.&lt;/span&gt;; free and open-source software has an important place in our community, but it is not the answer to all technological woes.&lt;/p&gt;
&lt;p&gt;From a practical perspective, I actually find myself leaning slightly toward Microsoft. Although I am perhaps least familiar with system administration and software development on Windows, I find Microsoft’s recent actions as a company pleasantly surprising and admirable. They seem eager to make their products accessible and open both to developers (who desire clear documentation and transparent sources) and end users (who desire dependability and elegant functionality). Microsoft doesn’t exhibit the vertical integration of their products and services that Apple does (allowing Apple to provide beautiful interfaces to their customers), but in relaxing their hold on the reins, Microsoft forms better relationships with their developer community. Microsoft still keeps much of their software closed-source, but without doing so they would struggle to make ends meet in order to deliver the high-quality services that end users have come to expect.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://neillrobson.com/assets/images/2018/01/the-infamous-liebster-award/Microsoft-logo_rgb_c-gray.png&quot; alt=&quot;Microsoft logo circa 2018&quot; title=&quot;A pretty (flat) logo&quot;&gt;&lt;figcaption&gt;A pretty (flat) logo&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So, long story short: In a perfect world, Linux. In this world, Microsoft!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you could play any instrument (other than one you already play), what would it be?&lt;/p&gt;
&lt;p&gt;I would definitely choose an instrument that I could carry with me, and perferrably one with which I could sing along. A guitar, despite its simplicity, would be ideal for these requirements! But since portability is more important to me than the ability to sing, I would also seriously consider a harmonica, because it could be a meditation and respite that could literally fit in my pocket.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Herbal, green, black, or white tea?&lt;/p&gt;
&lt;p&gt;I think I’ll have to go with the only choice on the list that isn’t, biologically speaking, tea: the variety of potentials in herbal drinks are what cause me to choose them as my favorite. Of course, one can create concoctions of tea leaves infused with herbs and spices as well, making herbal drinks a perfectly valid option on the list, although I suppose the choice is a bit of a cop-out response as I’m defining it to encompass every other option.&lt;/p&gt;
&lt;p&gt;If I had to choose a type of tea leaf, I would probably choose green tea, because of my lovely experience with Longjing tea in Hangzhou, Zhejiang, China (which you can read more about &lt;a href=&quot;https://neillrobson.com/blog/2016/06/15/the-tea/&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What was your favorite song as a small kid?&lt;/p&gt;
&lt;p&gt;I don’t remember having a single favorite song. However, there were several songs that stood out as hallmarks of my musical “coming-of-age”:&lt;/p&gt;
&lt;p&gt;The first song I remember falling in love with as a performance piece (on the piano) was &lt;a href=&quot;https://www.youtube.com/watch?v=d020hcWA_Wg&quot;&gt;Clocks by Coldplay&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first song I ever purchased was &lt;a href=&quot;https://www.youtube.com/watch?v=Y6ljFaKRTrI&quot;&gt;Still Alive by Jonathan Coulton&lt;/a&gt;. I also ended up parodying this song as a goodbye gift for the music teacher who directed the theatre production that was pivotal in maturing me emotionally and socially.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://neillrobson.com/assets/images/2018/01/the-infamous-liebster-award/chell.jpg&quot; alt=&quot;The protagonist of Portal&quot; title=&quot;Fan art of Portal--the video game in which Jonathan Coulton&#39;s song was featured&quot;&gt;&lt;figcaption&gt;Fan art of Portal–the video game in which Jonathan Coulton’s song was featured&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Speaking of that show, I am quite fond of several songs in the soundtrack of &lt;a href=&quot;https://www.youtube.com/playlist?list=PLnbBAvpTGon8EN_eh_zALsb7dxPy-ttnd&quot;&gt;HONK Jr&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first song I ever performed for a romantic interest was &lt;a href=&quot;https://www.youtube.com/watch?v=gynYtBmYlnk&quot;&gt;The Pout-Pout Fish&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And by far the most important, this song has grown up with me since elementary school as a vivid reminder of God’s relationship with me. Even as an adult it brings tears to my eyes remembering all the situations God carried me through with &lt;a href=&quot;https://www.youtube.com/watch?v=cROXxgPMzHA&quot;&gt;this song&lt;/a&gt; in my mind.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is the best joke you’ve ever heard?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I hate telling puns to kleptomaniacs; they always take things literally.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do you know what a viola is?&lt;/p&gt;
&lt;p&gt;Yeah… Isn’t it a string instrument that specializes in producing tones between the ranges of a violin and cello? I’m purposely not going to look up whether I’m right or not to preserve the innocence of my potentially incorrect and offensive answer.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://neillrobson.com/assets/images/2018/01/the-infamous-liebster-award/viola.jpg&quot; alt=&quot;viola&quot; title=&quot;Something like this, I think&quot;&gt;&lt;figcaption&gt;Something like this, I think&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have you ever been out of the country? If so, where?&lt;/p&gt;
&lt;p&gt;I’ve been to China (Shameless plug! Read more about the experience on this blog!) and the Caribbean. I would only consider the former experience to be true “cultural immersion,” as the trip to the Caribbean was simply a week-long vacation to a beautiful (but somewhat isolated) resort. It was a wonderful experience nonetheless!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What are some inside family quotes that you’ll never forget?&lt;/p&gt;
&lt;p&gt;In my younger and more self-conscious years, I hated the word “play” when it came to my social interactions with friends. My dad would sometimes reference a “play date” in which I participated, or asked if I would invite some classmates over to “play” after I finished my homework. My answer was invariably, “No! It isn’t called ‘playing’! It’s ‘hanging out’!”&lt;/p&gt;
&lt;p&gt;Well, my dad took a while to get the picture, but he somehow found the compassion and patience to accept my ridicules and attempt to change his perfectly appropriate vocabulary. Bless his heart; that pursuit had deleterious consequences.&lt;/p&gt;
&lt;p&gt;One evening, as a friend and I were enjoying dinner, I asked my dad if my friend could just stay overnight so we could have more time together. Eager to encourage my social interactions (of which I did not have many), my dad readily called up my friend’s parents to organize the evening. “Hi Rick,” he began. “This is Forrest, Neill’s dad. I was wondering if you would be willing-- uh, I mean, could Jacob and Neill have a–”&lt;/p&gt;
&lt;p&gt;Dad was struggling to find the socially acceptable term for the request: he was sure that the phrase “sleep-over” was eschewed by the younger crowd. What was the word for “hanging out” overnight? Finally, in a well-intentioned epiphany of vocabulary, my dad sputtered,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;…Could Jacob and Neill have a &lt;strong&gt;HANG&lt;/strong&gt;-over tonight?!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Needless to say, Jacob did not spend the night at the Robson household that evening.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Best board game? Best video game?&lt;/p&gt;
&lt;p&gt;Although I’ve never played a full session before, I have always venerated the Japanese board game &lt;a href=&quot;https://en.wikipedia.org/wiki/Go_game&quot;&gt;Go&lt;/a&gt; for its simplicity and stunning depth of strategy. There is only one type of piece, and they never move once placed, yet it took exponentially more computing power for artificial intelligence to beat a human at Go than it did for the game of Chess, with its sundry rules and moves.&lt;/p&gt;
&lt;p&gt;Best video game is, without the shadow of a doubt, &lt;a href=&quot;http://store.steampowered.com/app/210970/The_Witness/&quot;&gt;The Witness&lt;/a&gt;. It is a marvellous tapestry outlining human intelligence and philosophy, and a shining example of nonverbal communication. It is the one video game that I believe would have engaged C.S. Lewis, Steve Jobs, and Douglas Hofstadter alike.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://neillrobson.com/assets/images/2018/01/the-infamous-liebster-award/witness.jpg&quot; alt=&quot;logo for The Witness&quot; title=&quot;Beautiful.&quot;&gt;&lt;figcaption&gt;Beautiful.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How do you feel about autocorrect when texting?&lt;/p&gt;
&lt;p&gt;I’ve personally turned it off on my phone, because I like to make a habit of proofreading whatever I write (even if it’s just a text message). However, I also readily admit that this practice decreases the efficiency of my communication with others and that the misunderstandings arising from autocorrect are sometimes more valuable lessons than simply fixing typos in the first place. It all depends on your audience, I suppose!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If someone gave you a free, two-way ticket to Mars would you go?&lt;/p&gt;
&lt;p&gt;Actually, I think I would! Now, I would still want a year or so to get all of my affairs in order and make sure that my family and friends are all comfortable (!) with the decision. But considering the scientific and psychological advances that humanity would approach through such an experience, if some space-exploring entity deemed me fit to take such a journey, I would happily spend a significant part of my life exploring God’s creation in a way that no one else to this day has been privileged to do.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2018/01/28/the-infamous-liebster-award/#facts-delivered&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;facts-delivered&quot;&gt;Facts Delivered&lt;/h2&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;My favorite ingredient in any dish (where it is appropriate, of course) is the caper.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I drove my date to the senior prom in my grandfather’s 1995 Oldsmobile Cutlass Ciera.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I’ve remapped my keyboard so that the &lt;code&gt;capslock&lt;/code&gt; key acts as &lt;code&gt;esc&lt;/code&gt; when tapped and as &lt;code&gt;ctrl&lt;/code&gt; when held down along with another key. My left &lt;code&gt;ctrl&lt;/code&gt; key is mapped to &lt;code&gt;capslock&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My first paying job was acting as the cow mascot for Chick-fil-A. I had to quit because I grew too tall for the suit.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://neillrobson.com/assets/images/2018/01/the-infamous-liebster-award/chick-fil-a-cow-day-2013.jpg&quot; alt=&quot;A Chick-fil-A cow mascot&quot; title=&quot;Is that me?! Wouldn&#39;t you like to know...&quot;&gt;&lt;figcaption&gt;Is that me?! Wouldn’t you like to know…&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The first programming language I took classes and achieved fluency in is &lt;a href=&quot;http://jsoftware.com/&quot;&gt;J&lt;/a&gt;. My teacher was &lt;a href=&quot;https://www.linkedin.com/in/henry-rich-5b7503131/&quot;&gt;Henry Rich&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When I took an ideology test in high school, measuring my political views on a spectrum of -72 (left/liberal) to +72 (right/conservative), I received a stunning +2. Since then, my views haven’t changed much: last time I took the test, I had migrated to +6.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I have never crashed a motor vehicle (knock on wood!).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The latest I have ever stayed awake is 3am: I was infuriated because I could not connect to a Raspberry Pi headless (without a monitor). I have never pulled a true all-nighter.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://neillrobson.com/assets/images/2018/01/the-infamous-liebster-award/rpi.png&quot; alt=&quot;The Raspberry Pi motherboard, shown to sacle.&quot; title=&quot;I&#39;ve never tasted a real raspberry pie before: only the bitter tears of bootstrapping one.&quot;&gt;&lt;figcaption&gt;I’ve never tasted a real raspberry pie before: only the bitter tears of bootstrapping one.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I prefer colder climates over warmer ones: not because I like being outside in the cold, but because I love the feeling and smell of indoor heating (stove, fireplace, etc) more than the atmosphere made by indoor cooling (fans, air conditioning).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One of my childhood comfort foods was white rice with cupcake sprinkles mixed in.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I used to be terrified of my elementary school’s janitor, because he was from China and could not speak English well. Being unable to communicate was a prodigious fear for me, so I never talked to him.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2018/01/28/the-infamous-liebster-award/#questions-asked&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;questions-asked&quot;&gt;Questions Asked&lt;/h2&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you could replace all the water on Earth with one other homogeneous chemical substance–with the assurance that life on Earth could still survive exactly as it does now by drinking that chemical–what substance would you choose and why?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What are three adjectives that your worst enemy would use to describe you?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You’re going to a desert island and you get to take one book with you, but I get to rip out my choice of 50% of the pages before giving it to you. What book do you choose?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All world governments are now replaced with arbitrary Fortune 500 companies. You have your choice of living under any one of them. Which do you choose?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You’re sentenced to death row, and given the choice of your last meal. What do you choose?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is your favorite constant number? Zero, One, Pi, Euler’s Constant, the Imaginary Number? Constant of permittivity or permeability? Something else?&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://neillrobson.com/assets/images/2018/01/the-infamous-liebster-award/math.jpg&quot; alt=&quot;Handwritten Latin and Greek alphabets&quot; title=&quot;My handwriting? Ha. I wish...&quot;&gt;&lt;figcaption&gt;My handwriting? Ha. I wish…&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Describe the last experience that made you laugh without those around you finding it amusing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Describe the last experience where everyone else found something hilarious that you didn’t understand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From now on, you are only allowed to listen to one genre of music. Which genre do you choose?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Which conspiracy theory do you most want/hope to be true? Why?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set a timer for four hours from now (or whenever you are not working on the blog post you are currently writing). When the timer rings, immediately paste the contents of your computer’s clipboard, save them, and explain their context as the answer to this final question.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2018/01/28/the-infamous-liebster-award/#nominations&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;nominations&quot;&gt;Nominations&lt;/h2&gt;
&lt;/div&gt;
&lt;h3&gt;&lt;em&gt;a.k.a. The Plot Twist&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Having poured so much effort into this blog so far, I am ashamed to leave it incomplete due to a single negative perspective found on the Internet. However, as a matter of respect for other content producers and young professionals trying to establish a personal brand online, I have decided not to distribute any nominations for the Liebster award.&lt;/p&gt;
&lt;p&gt;Why did I make this decision?&lt;/p&gt;
&lt;p&gt;Upon attempting to find eleven blogs with under two hundred followers (as the rules specify), I stumbled upon &lt;a href=&quot;https://en.forums.wordpress.com/topic/for-liebster-awards-how-do-i-find-out-how-many-followers-a-blog-has?replies=5&quot;&gt;this conversation&lt;/a&gt; that condemned “blog awards” as amateurish attempts to artificially raise SEO rankings. Even blogs with valuable and unique content can have their reputation undermined by getting caught up in chain-based blog awards. Regardless of one’s intention in posting, partaking in such activities gives the appearance of one floundering for quality material.&lt;/p&gt;
&lt;p&gt;I will still publish this post as it is, because I respect the person who awarded me the Liebster and wish to support her in her first steps into blogging. However, I do not want to put anyone else under duress by publicly pressuring them to publish content that they do not feel is consistent with their online persona or professional image.&lt;/p&gt;
&lt;p&gt;(As an aside, I am well aware of the irony of my decision, given that my blog likely has under 10 readers and is far from “public pressure”!)&lt;/p&gt;
&lt;p&gt;That being said, I encourage anyone reading this blog who feels comfortable responding to the aforementioned questions–whether by commenting, blogging, posting on social media, or even shooting me an email–to take a chance and codify your thoughts! Sharing our lives with others through written language is a stimulating challenge and a wonderful blessing from God, and if nothing else I hope that this discursive draft has inspired a few others to transform thoughts into words.&lt;/p&gt;
&lt;/section&gt;
</description>
      <pubDate>Sun, 28 Jan 2018 19:30:00 GMT</pubDate>
      <dc:creator>Neill Robson</dc:creator>
      <guid>https://neillrobson.com/blog/2018/01/28/the-infamous-liebster-award/</guid>
    </item>
    <item>
      <title>Access vs. Ownership</title>
      <link>https://neillrobson.com/blog/2017/05/29/access-versus-ownership/</link>
      <description>&lt;section&gt;
&lt;p&gt;Recently I came across advertising online for a new co-living experiment taking
place in Los Angeles. The name of the startup is PodShare. Essentially, the goal
is to provide customers with location-independent access to a minimal set of
resources necessary to live and work effectively in an urban environment.  A bunk
on a wooden frame, a charging station, and a chalkboard identifying the
inhabitant are included in the package; doors, locks, and curtains are not.
Aside from the bed itself, all areas within a PodShare location are public: the
refrigerator and cooking utilities are shared, workspaces are common, and the
restrooms are handled dormitory-style. Maintaining a clean and safe environment
is as much the residents’ job as it is the staff’s, in the sense that everyone’s
space can be seen from all angles, creating an aura of community watch.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://neillrobson.com/assets/images/2017/05/access-vs-ownership/clean-pods.jpg&quot; alt=&quot;PodShare bunk beds&quot; title=&quot;A typical quiet afternoon amongst the pods&quot;&gt;&lt;figcaption&gt;A typical quiet afternoon amongst the pods&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If this description is hard to visualize, a good video providing an overview and
history of the startup can be found
&lt;a href=&quot;https://www.youtube.com/watch?v=H_ILu-R-Nz8&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2017/05/29/access-versus-ownership/#the-bare-luxuries&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;the-bare-luxuries&quot;&gt;The Bare Luxuries&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;My initial reaction to this foreign living concept could be described best as a
shameful terror. Terror, because I couldn’t imagine living in a situation so
hostile to privacy and ownership of space. Shame, because in the culture that is
starting this movement towards “Housing as a Service,” I recognize values and
visions that I myself hold dear. Would rejecting this development make me a
hypocrite?&lt;/p&gt;
&lt;p&gt;In truth, the initiative of PodShare makes several steps toward a lifestyle that
I have learned to esteem. To enjoy a content and fulfilling life in such an
environment, you can’t have too much baggage: there aren’t many nooks large
enough for one to unload their extra belongings, and there aren’t many ears
patient enough for one to unload their ponderous past. “Podestrians,” as they
are called, must minimize their possessions to the bare necessities. Wherever
one life is lacking, another life is prepared and encouraged to fill the gap.&lt;/p&gt;
&lt;p&gt;The environmental benefits are also considerable. The most bare-bones apartment
complex that could accommodate the same number of men and women would require at
least three times the land area and an order of magnitude more capital
resources, not to mention the marginal costs and inefficiencies associated with
independent thermostats, water lines, and electric service. Furthermore,
splitting the community into individual &lt;em&gt;houses&lt;/em&gt; would practically necessitate
the construction of a new subdivision: an impossibility in any principally urban
environment.&lt;/p&gt;
&lt;p&gt;Taking the idea to an even larger scale, PodShare claims that if it were to
expand its influence far enough, one would no longer need to book a hotel when
travelling. After all, a bed in one location is a bed in &lt;em&gt;any&lt;/em&gt; location with a
vacancy–just check out of your hometown PodShare and catch a bus to your new
location! How inconceivable that freedom is to the modern American citizen: the
concept that moving across the country for a week, month, or indefinitely could
be as simple as packing some carry-ons and catching a flight. Realtors,
mortgages, and moving vans need not apply. Sell your house, and ditch that
timeshare too: &lt;strong&gt;your bed &lt;em&gt;is&lt;/em&gt; your timeshare now.&lt;/strong&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2017/05/29/access-versus-ownership/#ownership%E2%80%99s-intrinsic-value&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;ownership%E2%80%99s-intrinsic-value&quot;&gt;Ownership’s Intrinsic Value&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;PodShare challenges our very definitions of house and home. “The future is
access, not ownership,” claims Elvina Beck, the founder of the company.
Millennials invest in gym memberships, public transportation, and music
streaming services rather than purchasing the physical capital necessary to
enjoy these luxuries for ourselves. Why not extend that idea to our very homes?&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://neillrobson.com/assets/images/2017/05/access-vs-ownership/community.jpg&quot; alt=&quot;Elvina Beck&quot; title=&quot;The occasional evening activity creates a sense of community. Hopefully nobody was looking to sleep tonight.&quot;&gt;&lt;figcaption&gt;The occasional evening activity creates a sense of community. Hopefully nobody was looking to sleep tonight.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I do agree that, in the general case, owning less can lead to living more. Our
culture in the United States has lost much of that compassionate, cooperative
nature that first brought society together when individuals would have failed
living alone. To put less reliance on the grasp of one’s own two hands, and
instead seek to be a strength in others’ weaknesses as they likewise provide
what you may lack, fills one’s soul in a beautiful and irreplaceable manner.&lt;/p&gt;
&lt;p&gt;But to what extent must we deny our own desire for control over physical
possessions to reap the intangible benefits of a cooperative lifestyle? Are
there not memories, emotions, and even fragments of our identity engrained in
our living spaces that could not exist without a sense of locality, of
ownership?&lt;/p&gt;
&lt;p&gt;Motivational speaker &lt;a href=&quot;http://www.simplybenglenn.com/&quot;&gt;Ben Glenn&lt;/a&gt; offers a
powerful example of this concept. To this day, I can recall with vivid detail
the Spring evening in 2009 when I witnessed him transform a black canvas into an
breathtaking explosion of variegated color before our eyes. The audience
journeyed with him step by step through the discovery process of artistic
creation, and by the end of the experience we all felt as though we, too, owned
the final work. Watching Ben share the exact same message at a different venue
or via a different medium holds none of the same gravity for me, because my
ownership and identity is contained in that one particular event, time, and
place.&lt;/p&gt;
&lt;p&gt;Would I be satisfied if, rather than attending that 2009 conference, I simply
received a recording of the event, to be viewed on demand at any location or
time? More importantly, if I had never experienced the original, &lt;em&gt;would I even
know what I was missing from the experience?&lt;/em&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://neillrobson.com/assets/images/2017/05/access-vs-ownership/ben-glenn.jpg&quot; alt=&quot;Ben Glenn&quot; title=&quot;Ben may create the same drawing thousands of times, but the one he crafted when I was in attendance was uniquely mine. No recreation does it justice.&quot;&gt;&lt;figcaption&gt;Ben may create the same drawing thousands of times, but the one he crafted when I was in attendance was uniquely mine. No recreation does it justice.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I do not believe I could describe with any accuracy the psychological difference
between owning a home and having geographically-independent access to shelter,
but I can only imagine that the effect would be similar to replacing such an
intimate artistic experience with a recording. Though the instrumental value of
housing has been demonstrated to be extractable into an on-demand construct, the
spirit of home feels tied intrinsically to geography. Stripping ourselves of
that luxury may not leave us physically homeless, but surely impoverished in
spirit. As Yi-Fu Tuan would perhaps characterize the change, we would be
accumulating the freedom of &lt;em&gt;space&lt;/em&gt; at the expense of the identity and security of
&lt;em&gt;place&lt;/em&gt;.&lt;label for=&quot;sn-1&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input id=&quot;sn-1&quot; type=&quot;checkbox&quot; class=&quot;margin-toggle&quot;&gt;&lt;span class=&quot;sidenote&quot;&gt;For a fascinating and edifying discussion on this topic, see Tuan’s work
&lt;a href=&quot;https://www.upress.umn.edu/book-division/books/space-and-place&quot;&gt;Space and Place&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;div class=&quot;section-link&quot;&gt;
&lt;a class=&quot;no-tufte-underline&quot; href=&quot;https://neillrobson.com/blog/2017/05/29/access-versus-ownership/#a-divine-model&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;a-divine-model&quot;&gt;A Divine Model&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;For much of His ministry on earth, Jesus was truly homeless. &amp;quot;Foxes have dens
and birds of the sky have nests, but the Son of Man has no place to lay His
head,&amp;quot; Jesus stated in response to a scribe&#39;s possibly naive proclamation of
devotion.&lt;label for=&quot;sn-2&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input id=&quot;sn-2&quot; type=&quot;checkbox&quot; class=&quot;margin-toggle&quot;&gt;&lt;span class=&quot;sidenote&quot;&gt;Matthew 8:20, HCSB&lt;/span&gt; Were His disciples willing to give up not only the physical comforts
of shelter, but the very identity tied to their earthly homes, in order to
accept adoption into God’s kingdom by Christ’s sacrifice? In what capacity is my
worldly identity preventing me from perceiving the transformation that God so
desires to work in His child and slave?&lt;/p&gt;
&lt;p&gt;And on a deeper inspection of Christ&#39;s life, giving up house did not mean giving
up home. His ties to his earthly family were not lost: rather, He found His
family multiplied to all who followed the will of His Father.&lt;label for=&quot;sn-3&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input id=&quot;sn-3&quot; type=&quot;checkbox&quot; class=&quot;margin-toggle&quot;&gt;&lt;span class=&quot;sidenote&quot;&gt;Matthew 12:49-50&lt;/span&gt; He shared
meals with brothers in the houses of the rich and poor, in the city and on the
beach, with intimacy and with thousands. He invested none of His identity in an
earthly dwelling, and yet He has arguably produced the greatest impact on
history and society that any individual has ever effected.&lt;/p&gt;
&lt;p&gt;I’m not ashamed to admit that, given my upbringing and human nature, the idea of
housing as evanescent “access” in contrast to home ownership scares me. But
looking at the life of my King, as well as the consequences of our past and our
hopes for the future, I believe that this physical and cultural transformation
may have the potential for great salutary good, should we give it the proper
thought and introspection.&lt;/p&gt;
&lt;p&gt;…And let’s be honest, PodShare has no plans for global domination by any
extent: they still receive most of their business from millennial vagabonds and
summer camps. We have ample time to reflect and discuss!&lt;/p&gt;
&lt;p&gt;What are your thoughts on this housing movement? Let me know in the comments
below.&lt;/p&gt;
&lt;/section&gt;
</description>
      <pubDate>Mon, 29 May 2017 00:00:00 GMT</pubDate>
      <dc:creator>Neill Robson</dc:creator>
      <guid>https://neillrobson.com/blog/2017/05/29/access-versus-ownership/</guid>
    </item>
  </channel>
</rss>